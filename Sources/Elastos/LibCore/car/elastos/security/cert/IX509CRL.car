//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Math.IBigInteger;
    interface Elastos.Utility.IDate;
    interface Elastos.Utility.ISet;
    interface Elastos.Security.IPublicKey;
    interface Elastos.Security.IPrincipal;
    interface Elastos.Security.Cert.IX509CRLEntry;
    interface Elastos.Security.Cert.IX509Certificate;
    interface Elastosx.Security.Auth.X500.IX500Principal;

    namespace Elastos {
    namespace Security {
    namespace Cert {

    /**
     * @Involve
     * interface ICRL
     */
    interface IX509CRL /*, IX509Extension*/ {
        /**
         * Returns whether the specified object equals to this instance.
         *
         * @param other
         *            the object to compare.
         * @return {@code true} if the specified object is equal to this, otherwise
         *         {@code false}.
         */
        Equals(
            [in] IInterface* other,
            [out] Boolean* result);

        /**
         * Returns the hashcode of this CRL instance.
         *
         * @return the hashcode.
         */
        GetHashCode(
            [out] Int32* hashCode);

        /**
         * Returns this CRL in ASN.1 DER encoded form.
         *
         * @return this CRL in ASN.1 DER encoded form.
         * @throws CRLException
         *             if encoding fails.
         */
        GetEncoded(
            [out, callee] ArrayOf<Byte>* encoded);

        /**
         * Verifies this CRL by verifying that this CRL was signed with the
         * corresponding private key to the specified public key.
         *
         * @param key
         *            the public key to verify this CRL with.
         * @throws CRLException
         *             if encoding or decoding fails.
         * @throws NoSuchAlgorithmException
         *             if a needed algorithm is not present.
         * @throws InvalidKeyException
         *             if the specified key is invalid.
         * @throws NoSuchProviderException
         *             if no provider can be found.
         * @throws SignatureException
         *             if errors occur on signatures.
         */
        Verify(
            [in] IPublicKey* key);

        /**
         * Verifies this CRL by verifying that this CRL was signed with the
         * corresponding private key to the specified public key. The signature
         * verification engine of the specified provider will be used.
         *
         * @param key
         *            the public key to verify this CRL with.
         * @param sigProvider
         *            the name of the provider for the signature algorithm.
         * @throws CRLException
         *             if encoding decoding fails.
         * @throws NoSuchAlgorithmException
         *             if a needed algorithm is not present.
         * @throws InvalidKeyException
         *             if the specified key is invalid.
         * @throws NoSuchProviderException
         *             if the specified provider cannot be found.
         * @throws SignatureException
         *             if errors occur on signatures.
         */
        Verify(
            [in] IPublicKey* key,
            [in] String sigProvider);

        /**
         * Returns the version number of this CRL.
         *
         * @return the version number of this CRL.
         */
        GetVersion(
            [out] Int32* vs);

        /**
         * <b>Do not use</b>, use {@link #getIssuerX500Principal()} instead. Returns
         * the issuer as an implementation specific Principal object.
         *
         * @return the issuer distinguished name.
         */
        GetIssuerDN(
            [out] IPrincipal** issuer);

        /**
         * Returns the issuer distinguished name of this CRL.
         *
         * @return the issuer distinguished name of this CRL.
         */
        GetIssuerX500Principal(
            [out] IX500Principal** issuer);

        /**
         * Returns the {@code thisUpdate} value of this CRL.
         *
         * @return the {@code thisUpdate} value of this CRL.
         */
        GetThisUpdate(
            [out] IDate** thisUpdate);

        /**
         * Returns the {@code nextUpdate} value of this CRL.
         *
         * @return the {@code nextUpdate} value of this CRL, or {@code null} if none
         *         is present.
         */
        GetNextUpdate(
            [out] IDate** nextUpdate);

        /**
         * Returns the CRL entry with the specified certificate serial number.
         *
         * @param serialNumber
         *            the certificate serial number to search for a CRL entry.
         * @return the entry for the specified certificate serial number, or {@code
         *         null} if not found.
         */
        GetRevokedCertificate(
            [in] IBigInteger* serialNumber,
            [out] IX509CRLEntry** crlEntry);

        /**
         * Returns the CRL entry for the specified certificate.
         *
         * @param certificate
         *            the certificate to search a CRL entry for.
         * @return the entry for the specified certificate, or {@code null} if not
         *         found.
         */
        GetRevokedCertificateEx(
            [in] IX509Certificate* certificate,
            [out] IX509CRLEntry** crlEntry);

        /**
         * Returns the set of revoked certificates.
         *
         * @return the set of revoked certificates, or {@code null} if no revoked
         *         certificates are in this CRL.
         */
        GetRevokedCertificates(
            [out] ISet** ctrlEntrys);

        /**
         * Returns the {@code tbsCertList} information of this CRL in DER encoded
         * form.
         *
         * @return the CRL information in DER encoded form.
         * @throws CRLException
         *             if encoding fails.
         */
        GetTBSCertList(
            [out, callee] ArrayOf<Byte>* tbsCertList);

        /**
         * Returns the signature bytes of this CRL.
         *
         * @return the signature bytes of this CRL.
         */
        GetSignature(
            [out, callee] ArrayOf<Byte>* signature);

        /**
         * Returns the name of the signature algorithm.
         *
         * @return the name of the signature algorithm.
         */
        GetSigAlgName(
            [out] String* sigAlgName);

        /**
         * Returns the OID of the signature algorithm.
         *
         * @return the OID of the signature algorithm.
         */
        GetSigAlgOID(
            [out] String* sigAlgOid);

        /**
         * Returns the parameters of the signature algorithm in DER encoded form.
         *
         * @return the parameters of the signature algorithm in DER encoded form, or
         *         {@code null} if not present.
         */
        GetSigAlgParams(
            [out, callee] ArrayOf<Byte>* sigAlgParams);
    }

    } // namespace Cert
    } // namespace Security
    } // namespace Elastos
}
