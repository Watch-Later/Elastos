//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    using interface Elastos.IO.IOutputStream;
    using interface Elastos.IO.IInputStream;

    interface Elastos.Droid.Graphics.ICanvas;

    namespace Elastos {
    namespace Droid {
    namespace Graphics {

    /**
     * A picture records drawing calls (via the canvas returned by beginRecording)
     * and can then play them back (via picture.draw(canvas) or canvas.drawPicture).
     * The picture's contents can also be written to a stream, and then later
     * restored to a new picture (via writeToStream / createFromStream). For most
     * content (esp. text, lines, rectangles), drawing a sequence from a picture can
     * be faster than the equivalent API calls, since the picture performs its
     * playback without incurring any java-call overhead.
     */
    interface IPicture {
        /**
         * To record a picture, call beginRecording() and then draw into the Canvas
         * that is returned. Nothing we appear on screen, but all of the draw
         * commands (e.g. drawRect(...)) will be recorded. To stop recording, call
         * endRecording(). At this point the Canvas that was returned must no longer
         * be referenced, and nothing should be drawn into it.
         */
        BeginRecording(
            [in] Int32 width,
            [in] Int32 height,
            [out] ICanvas** canvas);

        /**
         * Draw this picture on the canvas. The picture may have the side effect
         * of changing the matrix and clip of the canvas.
         *
         * @param canvas  The picture is drawn to this canvas
         */
        Draw(
            [in] ICanvas* canvas);

        /**
         * Call endRecording when the picture is built. After this call, the picture
         * may be drawn, but the canvas that was returned by beginRecording must not
         * be referenced anymore. This is automatically called if Picture.draw() or
         * Canvas.drawPicture() is called.
         */
        EndRecording();

        /**
         * Get the height of the picture as passed to beginRecording. This
         * does not reflect (per se) the content of the picture.
         */
        GetHeight(
            [out] Int32* height);

        /**
         * Get the width of the picture as passed to beginRecording. This
         * does not reflect (per se) the content of the picture.
         */
        GetWidth(
            [out] Int32* width);

        /**
         * Write the picture contents to a stream. The data can be used to recreate
         * the picture in this or another process by calling createFromStream.
         */
        WriteToStream(
            [in] IOutputStream* stream);

        GetNativePicture(
            [out] HANDLE* natviePicture);
    }

    interface IPictureHelper {
        /**
         * Create a new picture (already recorded) from the data in the stream. This
         * data was generated by a previous call to writeToStream(). Pictures that
         * have been persisted across device restarts are not guaranteed to decode
         * properly and are highly discouraged.
         *
         * <p>
         * <strong>Note:</strong> a picture created from an input stream cannot be
         * replayed on a hardware accelerated canvas.
         *
         * @see #writeToStream(java.io.OutputStream)
         * @deprecated The recommended alternative is to not use writeToStream and
         * instead draw the picture into a Bitmap from which you can persist it as
         * raw or compressed pixels.
         */
        CreateFromStream(
            [in] IInputStream* stream,
            [out] IPicture** pic);
    }

    } // namespace Graphics
    } // namespace Droid
    } // namespace Elastos
}
