//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    using interface Elastos.IO.IFile;
    interface Elastos.Droid.Content.Pm.IPackageLite;

    namespace Elastos {
    namespace Droid {
    namespace Internal {
    namespace Content {

    /**
     * A handle to an opened package, consisting of one or more APKs. Used as
     * input to the various NativeLibraryHelper methods. Allows us to scan and
     * parse the APKs exactly once instead of doing it multiple times.
     *
     * @hide
     */
    /**
     * @Involve
     * interface ICloseable
     */
    [local]
    interface INativeLibraryHelperHandle {
    }

    [local]
    interface INativeLibraryHelperHandleHelper {
        Create(
            [in] IFile* packageFile,
            [out] INativeLibraryHelperHandle** handle);

        CreatePackage(
            [in] HANDLE pkg, //PackageParser.Package*
            [out] INativeLibraryHelperHandle** handle);

        Create(
            [in] IPackageLite* pkgLite,
            [out] INativeLibraryHelperHandle** handle);
    }

    /**
     * Native libraries helper.
     *
     * @hide
     */
    [local, deprecated]
    interface INativeLibraryHelper {
        const String LIB_DIR_NAME = "lib";
        const String LIB64_DIR_NAME = "lib64";

        // Special value for {@code PackageParser.Package#cpuAbiOverride} to indicate
        // that the cpuAbiOverride must be clear.
        const String CLEAR_ABI_OVERRIDE = "-";

        /**
         * Copies native binaries to a shared library directory.
         *
         * @param handle APK file to scan for native libraries
         * @param sharedLibraryDir directory for libraries to be copied to
         * @return {@link PackageManager#INSTALL_SUCCEEDED} if successful or another
         *         error code from that class if not
         */
        CopyNativeBinaries(
            [in] INativeLibraryHelperHandle* handle,
            [in] IFile* sharedLibraryDir,
            [in] String abi,
            [out] Int32* result);

        /**
         * Checks if a given APK contains native code for any of the provided
         * {@code supportedAbis}. Returns an index into {@code supportedAbis} if a matching
         * ABI is found, {@link PackageManager#NO_NATIVE_LIBRARIES} if the
         * APK doesn't contain any native code, and
         * {@link PackageManager#INSTALL_FAILED_NO_MATCHING_ABIS} if none of the ABIs match.
         */
        FindSupportedAbi(
            [in] INativeLibraryHelperHandle* handle,
            [in] ArrayOf<String>* supportedAbis,
            [out] Int32* result);

        // Convenience method to call removeNativeBinariesFromDirLI(File)
        RemoveNativeBinariesLI(
            [in] String nativeLibraryPath);

        /**
         * Remove the native binaries of a given package. This deletes the files
         */
        RemoveNativeBinariesFromDirLI(
            [in] IFile* nativeLibraryDir,
            [in] Boolean deleteRootDir);

        CopyNativeBinariesForSupportedAbi(
            [in] INativeLibraryHelperHandle* handle,
            [in] IFile* libraryRoot,
            [in] ArrayOf<String>* abiList,
            [in] Boolean useIsaSubdir,
            [out] Int32* result);

        CopyNativeBinariesWithOverride(
            [in] INativeLibraryHelperHandle* handle,
            [in] IFile* libraryRoot,
            [in] String abiOverride,
            [out] Int32* result);

        SumNativeBinariesWithOverride(
            [in] INativeLibraryHelperHandle* handle,
            [in] String abiOverride,
            [out] Int64* size);

        HasRenderscriptBitcode(
            [in] INativeLibraryHelperHandle* handle,
            [out] Boolean* result);

        // For Elastos epk
        CopyEcoLI(
            [in] String epkPath,
            [in] String ecoName,
            [in] String ecoDir,
            [out] Int32* result);
    }

    } // namespace Content
    } // namespace Internal
    } // namespace Droid
    } // namespace Elastos
}