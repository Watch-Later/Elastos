//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    merge("AppOpsPolicy.car");
    merge("BasePermissionDialog.car");
    merge("CmHardwareService.car");
    merge("Exceptions.car");
    merge("SystemServer.car");
    merge("SystemService.car");
    merge("SystemServiceManager.car");
    merge("Watchdog.car");
    merge("NativeDaemonConnector.car");
    merge("MountServiceIdler.car");
    merge("EntropyMixer.car");

    merge("accessibility/EventStreamTransformation.car");
    merge("accessibility/ScreenMagnifier.car");

    merge("accounts/IAccountAuthenticatorCache.car");

    merge("am/ActivityRecord.car");
    merge("am/BroadcastFilter.car");
    merge("am/PendingIntentRecord.car");
    merge("am/ProcessMemInfo.car");
    merge("am/ProcessRecord.car");
    merge("am/ServiceRestarter.car");
    merge("am/UriPermissionOwnerExternalToken.car");
    merge("am/UserStartedState.car");

    merge("connectivity/NetworkAgentInfo.car");

    merge("content/SyncManager.car");
    merge("content/SyncOperation.car");
    merge("content/SyncStorageEngine.car");

    merge("display/AutomaticBrightnessController.car");
    merge("display/WifiDisplayController.car");
    merge("display/ColorFade.car");
    merge("display/DisplayAdapter.car");
    merge("display/DisplayBlanker.car");
    merge("display/DisplayPowerState.car");
    merge("display/OverlayDisplayWindow.car");
    merge("display/RampAnimator.car");

    merge("firewall/AMSInterface.car");
    merge("firewall/IntentFirewall.car");
    merge("firewall/Filter.car");
    merge("firewall/FirewallIntentResolver.car");

    merge("hdmi/DeviceDiscoveryAction.car");
    merge("hdmi/EmptyInterfaces.car");
    merge("hdmi/HdmiCecController.car");
    merge("hdmi/HdmiCecFeatureAction.car");
    merge("hdmi/HdmiCecLocalDevice.car");
    merge("hdmi/HdmiCecLocalDeviceTv.car");
    merge("hdmi/HdmiCecMessage.car");
    merge("hdmi/HdmiCecMessageValidator.car");
    merge("hdmi/HdmiCecStandbyModeHandler.car");
    merge("hdmi/HdmiControlService.car");

    merge("input/InputManagerService.car");
    merge("input/InputApplicationHandle.car");
    merge("input/InputWindowHandle.car");

    merge("lights/LightsManager.car");
    merge("lights/Light.car");

    merge("location/LocationProviderInterface.car");
    merge("location/FlpHardwareProvider.car");
    merge("location/RemoteListenerHelper.car");

    merge("media/MediaSessionRecord.car");

    merge("notification/DowntimeConditionProvider.car");
    merge("notification/ManagedServices.car");
    merge("notification/NotificationDelegate.car");
    merge("notification/NotificationManagerInternal.car");
    merge("notification/NotificationRecord.car");
    merge("notification/NotificationSignalExtractor.car");
    merge("notification/NotificationIntrusivenessExtractor.car");
    merge("notification/RankingConfig.car");
    merge("notification/RankingReconsideration.car");
    merge("notification/PackagePriorityExtractor.car");
    merge("notification/PackageVisibilityExtractor.car");
    merge("notification/ValidateNotificationPeople.car");

    merge("net/NetworkStatsService.car");
    merge("net/DelayedDiskWriteWriter.car");

    merge("power/SuspendBlocker.car");
    merge("power/ScreenOnBlocker.car");

    merge("statusbar/StatusBarManagerInternal.car");

    merge("storage/DeviceStorageMonitorInternal.car");

    merge("trust/TrustManagerService.car");

    merge("tv/TvInputHal.car");
    merge("tv/TvInputHardwareManager.car");

    merge("twilight/TwilightState.car");
    merge("twilight/TwilightManager.car");
    merge("twilight/TwilightListener.car");

    merge("wallpaper/WallpaperManagerService.car");

    merge("wifi/p2p/WifiP2pService.car");
    merge("wifi/RttService.car");
    merge("wifi/WifiScanningService.car");
    merge("wifi/WifiService.car");
    merge("wifi/WifiNative.car");

    merge("wm/WindowManagerService.car");

    merge("NetworkManagementService.car");
    // merge("power/SuspendBlocker.car");
    // merge("power/ScreenOnBlocker.car");
    // merge("RecognitionManagerService.car");

    interface Elastos.Droid.Server.Display.IColorFade;
    interface Elastos.Droid.Server.Display.IDisplayBlanker;
    interface Elastos.Droid.Server.Display.IDisplayPowerState;
    interface Elastos.Droid.Server.ISystemService;
    interface Elastos.Droid.Server.IWatchdogMonitor;
    interface Elastos.Droid.Server.Location.IFlpHardwareProvider;
    interface Elastos.Droid.Server.Lights.ILight;
    interface Elastos.Droid.Server.Wallpaper.IWallpaperConnection;
    interface Elastos.Droid.Server.Wallpaper.IWallpaperData;
    interface Elastos.Droid.Server.Wallpaper.IWallpaperManagerService;
    interface Elastos.Droid.Server.Wifi.P2p.IWifiP2pService;

    using interface Elastos.Droid.AccessibilityService.IAccessibilityServiceInfo;
    using interface Elastos.Droid.AccessibilityService.IIAccessibilityServiceConnection;
    using interface Elastos.Droid.Accounts.IAccount;
    using interface Elastos.Droid.Accounts.IAccountManagerResponse;
    using interface Elastos.Droid.Accounts.IIAccountAuthenticatorResponse;
    using interface Elastos.Droid.Accounts.IIAccountManager;
    using interface Elastos.Droid.App.Admin.IIDevicePolicyManager;
    using interface Elastos.Droid.App.IActivityContainerCallback;
    using interface Elastos.Droid.App.IAlertDialog;
    using interface Elastos.Droid.App.IDialog;
    using interface Elastos.Droid.App.IIActivityContainer;
    using interface Elastos.Droid.App.IIActivityManager;
    using interface Elastos.Droid.App.IIAlarmManager;
    using interface Elastos.Droid.App.IIAppTask;
    using interface Elastos.Droid.App.IINotificationManager;
    using interface Elastos.Droid.App.IIProfileManager;
    using interface Elastos.Droid.App.IISearchManager;
    using interface Elastos.Droid.App.IIUiModeManager;
    using interface Elastos.Droid.App.IIUserSwitchObserver;
    using interface Elastos.Droid.App.IIWallpaperManager;
    using interface Elastos.Droid.App.IPendingIntentOnFinished;
    using interface Elastos.Droid.App.IStopUserCallback;
    using interface Elastos.Droid.App.IWallpaperInfo;
    using interface Elastos.Droid.App.Job.IJobService;
    using interface Elastos.Droid.Bluetooth.IIBluetoothCallback;
    using interface Elastos.Droid.Bluetooth.IIBluetoothManager;
    using interface Elastos.Droid.Content.IBroadcastReceiver;
    using interface Elastos.Droid.Content.IContentResolver;
    using interface Elastos.Droid.Content.IComponentCallbacks;
    using interface Elastos.Droid.Content.IComponentCallbacks2;
    using interface Elastos.Droid.Content.IComponentName;
    using interface Elastos.Droid.Content.IContext;
    using interface Elastos.Droid.Content.IContextWrapper;
    using interface Elastos.Droid.Content.IIClipboard;
    using interface Elastos.Droid.Content.IIContentService;
    using interface Elastos.Droid.Content.IIIntentSender;
    using interface Elastos.Droid.Content.IIntent;
    using interface Elastos.Droid.Content.IISyncContext;
    using interface Elastos.Droid.Content.IISyncStatusObserver;
    using interface Elastos.Droid.Content.IIntentReceiver;
    using interface Elastos.Droid.Content.IServiceConnection;
    using interface Elastos.Droid.Content.IDialogInterface;
    using interface Elastos.Droid.Content.Pm.IILauncherApps;
    using interface Elastos.Droid.Content.Pm.IIPackageInstallObserver2;
    using interface Elastos.Droid.Content.Pm.IIPackageInstaller;
    using interface Elastos.Droid.Content.Pm.IIPackageInstallerSession;
    using interface Elastos.Droid.Content.Pm.IIPackageManager;
    using interface Elastos.Droid.Content.Pm.IIPackageDataObserver;
    using interface Elastos.Droid.Content.Pm.IIPackageMoveObserver;
    using interface Elastos.Droid.Content.Pm.IPackageInstallerSessionParams;
    using interface Elastos.Droid.Content.Pm.IPackageManager;
    using interface Elastos.Droid.Content.Pm.IRegisteredServicesCacheListener;
    using interface Elastos.Droid.Content.Res.IIThemeService;
    using interface Elastos.Droid.Database.IContentObserver;
    using interface Elastos.Droid.Hardware.Display.IDisplayListener;
    using interface Elastos.Droid.Hardware.Display.IIDisplayManager;
    using interface Elastos.Droid.Hardware.Hdmi.IHdmiDeviceInfo;
    using interface Elastos.Droid.Hardware.Hdmi.IIHdmiControlCallback;
    using interface Elastos.Droid.Hardware.Hdmi.IIHdmiControlService;
    using interface Elastos.Droid.Hardware.IICmHardwareService;
    using interface Elastos.Droid.Hardware.IIConsumerIrService;
    using interface Elastos.Droid.Hardware.IISerialManager;
    using interface Elastos.Droid.Hardware.IITorchService;
    using interface Elastos.Droid.Hardware.Input.IIInputManager;
    using interface Elastos.Droid.Hardware.Input.IInputDeviceListener;
    using interface Elastos.Droid.Hardware.Location.IIFusedLocationHardware;
    using interface Elastos.Droid.Hardware.Usb.IIUsbManager;
    using interface Elastos.Droid.Internal.App.IIAppOpsService;
    using interface Elastos.Droid.Internal.App.IIBatteryStats;
    using interface Elastos.Droid.Internal.App.IIProcessStats;
    using interface Elastos.Droid.Internal.AppWidget.IIAppWidgetService;
    using interface Elastos.Droid.Internal.Os.IBatteryCallback;
    using interface Elastos.Droid.Internal.Os.IIParcelFileDescriptorFactory;
    using interface Elastos.Droid.Internal.Os.IIDropBoxManagerService;
    using interface Elastos.Droid.Internal.Os.IIKillSwitchService;
    using interface Elastos.Droid.Internal.StatusBar.IIStatusBarService;
    using interface Elastos.Droid.Internal.Telephony.IITelephonyRegistry;
    using interface Elastos.Droid.Internal.TextService.IITextServicesManager;
    using interface Elastos.Droid.Internal.View.IIInputContext;
    using interface Elastos.Droid.Internal.View.IIInputMethod;
    using interface Elastos.Droid.Internal.View.IIInputMethodManager;
    using interface Elastos.Droid.Internal.View.IIInputSessionCallback;
    using interface Elastos.Droid.Internal.View.IInputMethodClient;
    using interface Elastos.Droid.Internal.Widget.IILockSettings;
    using interface Elastos.Droid.Location.IICountryDetector;
    using interface Elastos.Droid.Location.IIFusedGeofenceHardware;
    using interface Elastos.Droid.Location.IIGeoFenceListener;
    using interface Elastos.Droid.Location.IIGpsGeofenceHardware;
    using interface Elastos.Droid.Location.IIGpsStatusProvider;
    using interface Elastos.Droid.Location.IINetInitiatedListener;
    using interface Elastos.Droid.Location.IILocationManager;
    using interface Elastos.Droid.Media.IIMediaRouterService;
    using interface Elastos.Droid.Media.IIRemoteDisplayCallback;
    using interface Elastos.Droid.Media.Projection.IIMediaProjectionCallback;
    using interface Elastos.Droid.Media.Projection.IIMediaProjectionManager;
    using interface Elastos.Droid.Media.Projection.IIMediaProjection;
    using interface Elastos.Droid.Media.Session.IISession;
    using interface Elastos.Droid.Media.Session.IISessionController;
    using interface Elastos.Droid.Media.Session.IISessionManager;
    using interface Elastos.Droid.Net.IIConnectivityManager;
    using interface Elastos.Droid.Net.IIEthernetManager;
    using interface Elastos.Droid.Net.IINetworkManagementEventObserver;
    using interface Elastos.Droid.Net.IINetworkPolicyManager;
    using interface Elastos.Droid.Net.IINetworkStatsService;
    using interface Elastos.Droid.Net.IINetworkPolicyListener;
    using interface Elastos.Droid.Net.IINetworkScoreService;
    using interface Elastos.Droid.Net.IINetworkScoreCache;
    using interface Elastos.Droid.Net.Nsd.IINsdManager;
    using interface Elastos.Droid.Os.IBinder;
    using interface Elastos.Droid.Os.IBundle;
    using interface Elastos.Droid.Os.IHandler;
    using interface Elastos.Droid.Os.IHandlerCallback;
    using interface Elastos.Droid.Os.ILooper;
    using interface Elastos.Droid.Os.ILowPowerModeListener;
    using interface Elastos.Droid.Os.IIVibratorService;
    using interface Elastos.Droid.Os.IIUserManager;
    using interface Elastos.Droid.Os.IIPowerManager;
    using interface Elastos.Droid.Os.IIHardwareService;
    using interface Elastos.Droid.Os.IIUpdateLock;
    using interface Elastos.Droid.Os.IISchedulingPolicyService;
    using interface Elastos.Droid.Os.IINetworkManagementService;
    using interface Elastos.Droid.Os.IPermissionController;
    using interface Elastos.Droid.Os.IIUserManager;
    using interface Elastos.Droid.Os.IIBatteryPropertiesListener;
    using interface Elastos.Droid.Os.IResultReceiver;
    using interface Elastos.Droid.Os.IIRemoteCallback;
    using interface Elastos.Droid.Os.Storage.IIMountService;
    using interface Elastos.Droid.Os.Storage.IIMountShutdownObserver;
    using interface Elastos.Droid.Server.IWidgetBackupProvider;
    using interface Elastos.Droid.Service.Dreams.IIDreamManager;
    using interface Elastos.Droid.Service.Notification.IIStatusBarNotificationHolder;
    using interface Elastos.Droid.Service.Notification.IStatusBarNotification;
    using interface Elastos.Droid.Service.Persistentdata.IIPersistentDataBlockService;
    using interface Elastos.Droid.Service.Wallpaper.IIWallpaperConnection;
    using interface Elastos.Droid.Utility.ITrustedTime;
    using interface Elastos.Droid.View.Accessibility.IIAccessibilityManager;
    using interface Elastos.Droid.View.IApplicationToken;
    using interface Elastos.Droid.View.IIInputFilter;
    using interface Elastos.Droid.View.IIInputFilterHost;
    using interface Elastos.Droid.View.IInputChannel;
    using interface Elastos.Droid.View.IIWindowManager;
    using interface Elastos.Droid.View.IWindowManagerPolicyWindowManagerFuncs;
    using interface Elastos.Droid.View.IIWindowSessionCallback;
    using interface Elastos.Droid.View.IWindowState;
    using interface Elastos.Droid.View.IIWindowId;
    using interface Elastos.Droid.View.IWindowSession;
    using interface Elastos.Droid.View.IIAssetAtlas;
    using interface Elastos.Droid.Wifi.IIRttManager;
    using interface Elastos.Droid.Wifi.IIWifiScanner;
    using interface Elastos.Droid.Wifi.IIWifiManager;
    using interface Elastos.Droid.Wifi.P2p.IIWifiP2pManager;
    using interface Elastos.Droid.Webkit.IIWebViewUpdateService;

    using interface Elastos.Core.IRunnable;
    using interface Elastos.Core.IThread;
    using interface Elastos.IO.IFile;
    using interface Elastos.Utility.ISet;

    namespace Elastos {
    namespace Droid {
    namespace Server {

    class CMasterClearReceiver {
        constructor();

        interface IBroadcastReceiver;
    }

    [local]
    class CPersistentDataBlockService {
        constructor(
            [in] IContext* ctx);

        interface ISystemService;
    }

    [local]
    class CEntropyMixer {
        constructor(
            [in] IContext* ctx);

        interface IEntropyMixer;
        interface IBinder;
    }

    class CAppOpsService {
        constructor(
            [in] IFile* storagePath,
            [in] IHandler* handler);

        interface IIAppOpsService;
        interface IBinder;
    }

    class CAppOpsServiceClientState {
        constructor(
            [in] IBinder* appToken,
            [in] IIAppOpsService* host);

        interface IBinder;
        interface IProxyDeathRecipient;
    }

    [local]
    class CCmHardwareService {
        constructor(
            [in] IContext* context);

        interface IICmHardwareService;
    }

    [local]
    class CTorchService {
        constructor(
            [in] IContext* context);

        interface IITorchService;
    }

    [local]
    class CBasePermissionDialog {
        constructor(
            [in] IContext* context);

        interface IBasePermissionDialog;
        interface IAlertDialog;
        interface IDialogInterface;
        interface IDialog;
    }

    [local]
    class CPermissionDialog {
        constructor(
            [in] IContext* context,
            [in] IIAppOpsService* service,
            [in] Int32 code,
            [in] Int32 uid,
            [in] String packageName);

        interface IPermissionDialog;
        interface IBasePermissionDialog;
        interface IAlertDialog;
        interface IDialogInterface;
        interface IDialog;
    }

    [local]
    class CKillSwitchService {
        constructor(
            [in] IContext* context);

        interface IIKillSwitchService;
    }

    class CInputMethodManagerServiceMethodCallback {
        constructor(
            [in] IIInputMethodManager* imms,
            [in] IIInputMethod* method,
            [in] IInputChannel* channel);

        interface IIInputSessionCallback;
        interface IBinder;
    }

    class CInputMethodManagerServiceUserSwitchObserver {
        constructor(
            [in] IIInputMethodManager* imms);

        interface IIUserSwitchObserver;
        interface IBinder;
    }

    [local]
    class CInputMethodManagerService {
        constructor(
            [in] IContext* ctx,
            [in] IIWindowManager* windowManagerService);

        interface IIInputMethodManager;
        interface IBinder;
        interface IServiceConnection;
        interface IHandlerCallback;
    }

    [local]
    class CNetworkManagementService {
        constructor(
            [in] IContext* ctx,
            [in] String socket);

        interface IINetworkManagementService;
        interface IBinder;
    }

    [local]
    class CNetworkScoreService {
        constructor(
            [in] IContext* ctx);

        interface IINetworkScoreService;
        interface IBinder;
    }

    [local]
    class CNsdService {
        constructor(
            [in] IContext* ctx);

        interface IINsdManager;
        interface IBinder;
    }

    [local]
    class CSerialService {
        constructor(
            [in] IContext* ctx);

        interface IISerialManager;
        interface IBinder;
    }

    [local]
    class CLocationManagerService {
        constructor(
           [in] IContext* ctx);

       interface IILocationManager;
       interface IBinder;
    }

    [local]
    class CBluetoothManagerService {
        constructor(
            [in] IContext* ctx);

        interface IIBluetoothManager;
        interface IBinder;
    }

    class CBluetoothManagerServiceBluetoothCallback {
        constructor(
            [in] IIBluetoothManager* bluetoothManager);

        interface IIBluetoothCallback;
        interface IBinder;
    }

    [local]
    class CDiskStatsService {
        constructor(
            [in] IContext* ctx);

        interface IBinder;
    }

    [local]
    class CUpdateLockService {
        constructor(
            [in] IContext* ctx);

        interface IIUpdateLock;
        interface IBinder;
    }

    [local]
    class CSamplingProfilerService {
        constructor(
            [in] IContext* ctx);

        interface IBinder;
    }

    [local]
    class CCountryDetectorService {
        constructor(
            [in] IContext* ctx);

        interface IICountryDetector;
        interface IBinder;
    }

    [local]
    class CCommonTimeManagementService {
        constructor(
            [in] IContext* ctx);

        interface IBinder;
    }

    class CCommonTimeManagementServiceIfaceObserver {
        constructor(
            [in] IBinder* commonTimeManagementService);

        interface IINetworkManagementEventObserver;
        interface IBinder;
    }

    [local]
    class CDropBoxManagerService {
        constructor(
            [in] IContext* ctx,
            [in] IFile* path);

        interface IIDropBoxManagerService;
        interface IBinder;
    }

    singleton class CSystemServer {
        interface ISystemServer;
    }

    class CNetworkPolicyListener {
        constructor(
            [in] IIConnectivityManager* connectivityService);

        interface IINetworkPolicyListener;
        interface IBinder;
    }

    class CDataActivityObserver {
        constructor(
            [in] IIConnectivityManager* connectivityService);

        interface IINetworkManagementEventObserver;
        interface IBinder;
    }

    [local]
    class CConnectivityService {
        constructor(
            [in] IContext* ctx,
            [in] IINetworkManagementService* netManager,
            [in] IINetworkStatsService* statsService,
            [in] IINetworkPolicyManager* policyManager);

        interface IIConnectivityManager;
        interface IBinder;
    }

    [local]
    class CTextServicesManagerService {
        constructor(
            [in] IContext* ctx);

        interface IITextServicesManager;
        interface IBinder;
    }

    [local]
    class CTSMSUserSwitchObserver {
        constructor(
            [in] IITextServicesManager* tsm);

        interface IIUserSwitchObserver;
        interface IBinder;
    }

    [local]
    class CUiModeManagerService {
        constructor(
            [in] IContext* ctx);

        interface ISystemService;
    }

    [local]
    class CUiModeManagerBinderService {
        constructor(
            [in] ISystemService* uiModeManagerService);

        interface IIUiModeManager;
        interface IBinder;
    }

    [local]
    class CCertBlacklister {
        constructor(
            [in] IContext* ctx);

        interface IBinder;
    }

    [local]
    class CVibratorService {
        constructor(
            [in] IContext* ctx);

        interface IIVibratorService;
        interface IInputDeviceListener;
        interface IBinder;
    }

    [local]
    class CTelephonyRegistry {
        constructor(
            [in] IContext* ctx);

        interface IITelephonyRegistry;
        interface IBinder;
    }

    [local]
    class CAlarmManagerBinderService {
        constructor(
            [in] ISystemService* alarmManagerService);

        interface IIAlarmManager;
        interface IBinder;
    }

    [local]
    class CConsumerIrService {
        constructor(
            [in] IContext* ctx);

        interface IIConsumerIrService;
        interface IBinder;
    }

    class CMountServiceIdler {
        constructor();

        interface IMountServiceIdler;
        interface IContext;
        interface IContextWrapper;
        interface IComponentCallbacks;
        interface IComponentCallbacks2;
        interface IJobService;
    }

    [local]
    class CPersistentDataBlockBinderService{
        constructor(
            [in] ISystemService* persistentDataBlockService);

        interface IIPersistentDataBlockService;
        interface IBinder;
    }

    [local]
    class CBatteryService {
        constructor(
            [in] IContext* ctx);

        interface ISystemService;
    }

    [local]
    class CBatteryBinderService {
        constructor(
            [in] ISystemService* batteryService);

        interface IBinder;
    }

    [local]
    class CLockSettingsService {

        constructor(
            [in] IContext* ctx);

        interface IILockSettings;
        interface IBinder;
    }

    [local]
    class CAssetAtlasService {

        constructor(
            [in] IContext* ctx);

        interface IIAssetAtlas;
        interface IBinder;
    }

//     class CBackupManagerService {
//         constructor(
//             [in] IContext* ctx);

//         interface IIBackupManager;
//         interface IBinder;
//     }

//     class CSystemBackupAgent {
//         interface IBackupAgentHelper;
//     }

//     backup
//     class CActiveRestoreSession {
//         constructor(
//             [in] String packageName,
//             [in] String transport,
//             [in] HANDLE host);

//         interface IIRestoreSession;
//         interface IBinder;
//     }

//     class CWMSUserSwitchObserver {
//         constructor(
//             [in] HANDLE owner);

//         interface IIUserSwitchObserver;
//         interface IBinder;
//     }

    [local]
    class CProfileManagerService {
        constructor(
            [in] IContext* context);

        interface IIProfileManager;
        interface IBinder;
    }

    [local]
    class CThemeService {
        constructor(
            [in] IContext* context);

        interface IIThemeService;
        interface IBinder;
    }

    class CThemeServiceSettingsObserver {
        constructor(
            [in] IIThemeService* host);

        interface IContentObserver;
    }

// //    namespace Updates {
// //
// //    class CCertPinInstallReceiver {
// //        constructor();
// //
// //        interface IBroadcastReceiver;
// //    }
// //
// //    class CConfigUpdateInstallReceiver {
// //        constructor(
// //            [in] String updateDir,
// //            [in] String updateContentPath,
// //            [in] String updateMetadataPath,
// //            [in] String updateVersionPath));
// //
// //        interface IBroadcastReceiver;
// //    }
// //
// //    class CSmsShortCodesInstallReceiver {
// //        constructor();
// //
// //        interface IBroadcastReceiver;
// //    }
// //
// //    } // namespace Updates

    namespace Ethernet {

        [local]
        class CEthernetServiceImpl {
            constructor(
                [in] IContext* ctx);

            interface IIEthernetManager;
            interface IBinder;
        }

    } // namespace Ethernet

    namespace Usb {

    [local]
    class CUsbService {
        constructor(
            [in] IContext* ctx);

        interface IIUsbManager;
        interface IBinder;
    }

    } // namespace Usb

    namespace Search {
        [local]
        class CSearchManagerService {
            constructor(
               [in] IContext* ctx);

            interface IISearchManager;
            interface IBinder;
        }
    }

    namespace Wm {

    [local]
    class CWindowManagerService {
        constructor(
            [in] IContext* ctx,
            [in] IIInputManager* inputManager,
            [in] Boolean haveInputMethods,
            [in] Boolean showBootMsgs,
            [in] Boolean onlyCore);

        interface IIWindowManager;
        interface IWindowManagerPolicyWindowManagerFuncs;
        interface IWatchdogMonitor;
        interface IBinder;
    }

    class CSession {
        constructor(
            [in] IIWindowManager* service,
            [in] IIWindowSessionCallback* cb,
            [in] IInputMethodClient* client,
            [in] IIInputContext* inputContext);

        interface IWindowSession;
        interface IProxyDeathRecipient;
    }

    [local]
    class CWindowId {
        constructor(
            [in] IWindowState* host);

        interface IIWindowId;
    }

    } // Wm

    [local]
    class CMountService {
        constructor(
            [in] IContext* ctx);

        interface IIMountService;
        interface IBinder;
        interface INativeDaemonConnectorCallbacks;
        interface IWatchdogMonitor;
    }

//     class CRecognitionManagerService {
//         constructor(
//             [in] IContext* ctx);
//         interface IRecognitionManagerService;
//         interface IBinder;
//     }

    namespace Accounts {

    /**
     * A system service that provides  account, password, and authtoken management for all
     * accounts on the device. Some of these calls are implemented with the help of the corresponding
     * {@link IIAccountAuthenticator} services. This service is not accessed by users directly,
     * instead one uses an instance of {@link AccountManager}, which can be accessed as follows:
     *    AccountManager accountManager =
     *      (AccountManager)context.getSystemService(Context.ACCOUNT_SERVICE)
     * @hide
     */
    [local]
    class CAccountManagerService {
        constructor(
            [in] IContext* ctx);

        constructor(
            [in] IContext* ctx,
            [in] IPackageManager* packageManager,
            [in] IIAccountAuthenticatorCache* authenticatorCache);

        interface IBinder;
        interface IIAccountManager;
        interface IRegisteredServicesCacheListener;
    }

    class CTestFeaturesSession {
        constructor(
            [in] IInterface* accounts,
            [in] IAccountManagerResponse* response,
            [in] IAccount* account,
            [in] ArrayOf<String> features,
            [in] IIAccountManager* host);

        interface IIAccountAuthenticatorResponse;
        interface IBinder;
        interface IProxyDeathRecipient;
        interface IServiceConnection;
    }

    class CRemoveAccountSession {
        constructor(
            [in] IInterface* accounts,
            [in] IAccountManagerResponse* response,
            [in] IAccount* account,
            [in] IIAccountManager* host);

        interface IIAccountAuthenticatorResponse;
        interface IBinder;
        interface IProxyDeathRecipient;
        interface IServiceConnection;
    }

    class CGetAuthTokenLabelSession {
        constructor(
            [in] IInterface* accounts,
            [in] IAccountManagerResponse* response,
            [in] String type,
            [in] String authTokenType,
            [in] IIAccountManager* host);

        interface IIAccountAuthenticatorResponse;
        interface IBinder;
        interface IProxyDeathRecipient;
        interface IServiceConnection;
    }

    class CGetAuthTokenSession {
        constructor(
            [in] IInterface* accounts,
            [in] IAccountManagerResponse* response,
            [in] IAccount* account,
            [in] String authTokenType,
            [in] Boolean expectActivityLaunch,
            [in] IBundle* loginOptions,
            [in] Boolean notifyOnAuthFailure,
            [in] Boolean permissionGranted,
            [in] Boolean customTokens,
            [in] IIAccountManager* host);

        interface IIAccountAuthenticatorResponse;
        interface IBinder;
        interface IProxyDeathRecipient;
        interface IServiceConnection;
    }

    class CAddAcountSession {
        constructor(
            [in] IInterface* accounts,
            [in] IAccountManagerResponse* response,
            [in] String accountType,
            [in] Boolean expectActivityLaunch,
            [in] String authTokenType,
            [in] ArrayOf<String> requiredFeatures,
            [in] IBundle* options,
            [in] IIAccountManager* host);

        interface IIAccountAuthenticatorResponse;
        interface IBinder;
        interface IProxyDeathRecipient;
        interface IServiceConnection;
    }

    class CConfirmCredentialsAsUserSession {
        constructor(
            [in] IInterface* accounts,
            [in] IAccountManagerResponse* response,
            [in] Boolean expectActivityLaunch,
            [in] IAccount* account,
            [in] IBundle* options,
            [in] IIAccountManager* host);

        interface IIAccountAuthenticatorResponse;
        interface IBinder;
        interface IProxyDeathRecipient;
        interface IServiceConnection;
    }

    class CUpdateCredentialsSession {
        constructor(
            [in] IInterface* accounts,
            [in] IAccountManagerResponse* response,
            [in] Boolean expectActivityLaunch,
            [in] IAccount* account,
            [in] String authTokenType,
            [in] IBundle* loginOptions,
            [in] IIAccountManager* host);

        interface IIAccountAuthenticatorResponse;
        interface IBinder;
        interface IProxyDeathRecipient;
        interface IServiceConnection;
    }

    class CEditPropertiesSession {
        constructor(
            [in] IInterface* accounts,
            [in] IAccountManagerResponse* response,
            [in] String type,
            [in] Boolean expectActivityLaunch,
            [in] IIAccountManager* host);

        interface IIAccountAuthenticatorResponse;
        interface IBinder;
        interface IProxyDeathRecipient;
        interface IServiceConnection;
    }

    class CGetAccountsByTypeAndFeatureSession {
        constructor(
            [in] IInterface* accounts,
            [in] IAccountManagerResponse* response,
            [in] String type,
            [in] ArrayOf<String> features,
            [in] Int32 callingUid,
            [in] IIAccountManager* host);

        interface IIAccountAuthenticatorResponse;
        interface IBinder;
        interface IProxyDeathRecipient;
        interface IServiceConnection;
    }

    class CCopyAccountToUserSession {
        constructor(
            [in] IInterface* accounts,
            [in] IAccountManagerResponse* response,
            [in] IAccount* account,
            [in] Boolean expectActivityLaunch,
            [in] Boolean stripAuthTokenFromResult,
            [in] IIAccountManager* host,
            [in] IInterface* toAccounts);

        interface IIAccountAuthenticatorResponse;
        interface IBinder;
        interface IProxyDeathRecipient;
        interface IServiceConnection;
    }

    class CCompleteCloningAccountSession {
        constructor(
            [in] IInterface* accounts,
            [in] IAccountManagerResponse* response,
            [in] IAccount* account,
            [in] Boolean expectActivityLaunch,
            [in] Boolean stripAuthTokenFromResult,
            [in] IIAccountManager* host,
            [in] IBundle* result);

        interface IIAccountAuthenticatorResponse;
        interface IBinder;
        interface IProxyDeathRecipient;
        interface IServiceConnection;
    }

    [deprecated]
    class CAddAccountAsUserSession {
        constructor(
            [in] IInterface* accounts,
            [in] IAccountManagerResponse* response,
            [in] String accountType,
            [in] Boolean expectActivityLaunch,
            [in] Boolean stripAuthTokenFromResult,
            [in] IIAccountManager* host,
            [in] String authTokenType,
            [in] ArrayOf<String>* requiredFeatures,
            [in] IBundle* options);

        interface IIAccountAuthenticatorResponse;
        interface IBinder;
        interface IProxyDeathRecipient;
        interface IServiceConnection;
    }

    } // namespace Accounts

    namespace Media {
    namespace Projection {

    class CMediaProjectionManager {
        constructor(
            [in] HANDLE host);
        interface IIMediaProjectionManager;
        interface IBinder;
    }

    class CMediaProjection {
        constructor(
            [in] Int32 type,
            [in] Int32 uid,
            [in] String packageName,
            [in] HANDLE host);
        interface IIMediaProjection;
        interface IBinder;
    }

    } // Projection

    [local]
    class CMediaRouterService {
        constructor(
            [in] IContext* ctx);

        interface IIMediaRouterService;
        interface IWatchdogMonitor;
        interface IBinder;
    }

    [local]
    class CMediaSessionService {
        constructor(
            [in] IContext* ctx);

        interface ISystemService;
    }

    class CMediaSession {
        constructor(
            [in] IMediaSessionRecord* host);

        interface IISession;
        interface IBinder;
    }

    class CSessionController {
        constructor(
            [in] IMediaSessionRecord* host);

        interface IISessionController;
        interface IBinder;
    }

    class CSessionManagerImpl {
        constructor(
            [in] HANDLE host);
        interface IISessionManager;
        interface IBinder;
    }

    class CKeyEventWakeLockReceiver {
        constructor(
            [in] IHandler* handler,
            [in] HANDLE host);

        interface IResultReceiver;
        interface IPendingIntentOnFinished;
        interface IParcelable;
    }

    class CProviderCallback {
        constructor(
            [in] HANDLE connection);

        interface IIRemoteDisplayCallback;
        interface IBinder;
    }

    } // Media

//     class CWifiService {
//         constructor(
//             [in] IContext* ctx);

//         interface IIWifiManager;
//     }

//     class CWifiDisplayManagerService {
//         constructor(
//             [in] IContext* ctx,
//             [in] IIPowerManager* powerManagerService);

//         interface IWifiDisplayManager;
//     }

//     class CZigbeeService {
//         constructor(
//             [in] IContext* ctx);

//         interface IZigbeeService;
//         interface IBinder;
//     }

//     class CKortideRemoteService {
//         constructor(
//             [in] IContext* ctx);

//         interface IKortideRemoteService;
//         interface IBinder;
//     }

    } // namespace Server
    } // namepsace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace Accessibility {

        [local]
        class CAccessibilityManagerService {
            constructor(
                [in] IContext* ctx);

            interface IIAccessibilityManager;
            interface IBinder;
        }

        class CAccessibilityServiceConnection {
            constructor(
                [in] Int32 userId,
                [in] IComponentName* componentName,
                [in] IAccessibilityServiceInfo* accessibilityServiceInfo,
                [in] IIAccessibilityManager* accessibilityManager);

            interface IIAccessibilityServiceConnection;
            interface IBinder;
            interface IServiceConnection;
            interface IProxyDeathRecipient;
        }

        class CMagnificationController {
            constructor(
                [in] IEventStreamTransformation* screenMagnifier,
                [in] Int64 animationDuration);

            interface IMagnificationController;
        }

    } // namespace Accessibility
    } // namespace Server
    } // namepsace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace Webkit {

    [local]
    class CWebViewUpdateBinderService {
        constructor(
            [in] ISystemService* batteryService);

        interface IIWebViewUpdateService;
        interface IBinder;
    }

    } // namespace Webkit
    } // namespace Server
    } // namepsace Droid
    } // namespace Elastos


    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace Pm {

    [local]
    class CLauncherAppsService {
        constructor(
            [in] IContext* ctx);

        interface ISystemService;
    }

    [local]
    class CPackageManagerService {
        constructor(
            [in] IContext* ctx,
            [in] HANDLE installer,
            [in] Boolean factoryTest,
            [in] Boolean onlyCore);

        interface IIPackageManager;
        interface IBinder;
    }

    class CParcelFileDescriptorFactory {
        constructor(
            [in] IFile* codeFile);

        interface IIParcelFileDescriptorFactory;
        interface IBinder;
    }

    class CResourcesChangedReceiver {
        constructor(
            [in] IIPackageManager* owner,
            [in] ISet* keys,
            [in] Boolean reportStatus);

        interface IIntentReceiver;
        interface IBinder;
    }

    class CPackageInstallObserver2 {
        constructor(
            [in] IIPackageManager* owner,
            [in] IIPackageMoveObserver* observer,
            [in] String packageName);

        interface IIPackageInstallObserver2;
        interface IBinder;
    }

    class CKeySetHandle {
        constructor();

        interface IBinder;
    }

    [local]
    class CLauncherAppsImpl {
        constructor(
            [in] IContext* ctx);

        interface IILauncherApps;
        interface IBinder;
    }

    [local]
    class CPackageInstallerService {
        constructor(
            [in] IContext* ctx,
            [in] IIPackageManager* pm,
            [in] IFile* stagingDir);

        interface IIPackageInstaller;
        interface IBinder;
    }

    [local]
    class CPackageInstallerSession {
        constructor(
            [in] HANDLE cb,
            [in] IContext* ctx,
            [in] IIPackageManager* pm,
            [in] ILooper* l,
            [in] Int32 sessionId,
            [in] Int32 userId,
            [in] String installerPackageName,
            [in] Int32 installerUid,
            [in] IPackageInstallerSessionParams* params,
            [in] Int64 createdMillis,
            [in] IFile* stagingDir,
            [in] String stageCid,
            [in] Boolean prepared,
            [in] Boolean sealed);

        interface IIPackageInstallerSession;
        interface IBinder;
    }

    class CLocalObserver {
        constructor(
            [in] IIPackageInstallerSession* session);

        interface IIPackageInstallObserver2;
        interface IBinder;
    }

    [local]
    class CUserManagerService {
        constructor(
            [in] IFile* dataDir,
            [in] IFile* baseUserPath);

        constructor(
            [in] IContext* ctx,
            [in] IIPackageManager* pm,
            [in] IObject* installLock,
            [in] IObject* packagesLock);

        interface IIUserManager;
        interface IBinder;
    }

    class CUserStopUserCallback {
        constructor(
            [in] IIUserManager* mUm);

        interface IStopUserCallback;
        interface IBinder;
    }

    } // namespace Pm
    } // namespace Server
    } // namepsace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace StatusBar {

    [local]
    class CStatusBarManagerService {
        constructor(
            [in] IContext* ctx,
            [in] IIWindowManager* wm);

        interface IIStatusBarService;
        interface IBinder;
    }

    } // namespace StatusBar
    } // namespace Server
    } // namepsace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace Dreams {

    [local]
    class CDreamManagerService {
        constructor(
            [in] IContext* ctx);

        interface ISystemService;
        interface IBinder;
    }

    [local]
    class CDreamManagerBinderService {
        constructor(
            [in] ISystemService* dreamManagerService);

        interface IIDreamManager;
        interface IBinder;
    }

    } // namespace Dreams
    } // namespace Server
    } // namepsace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace Wallpaper {

        [local]
        class CWallpaperManagerService  {
            constructor(
                [in] IContext* ctx);

            interface IWallpaperManagerService;
            interface IIWallpaperManager;
            interface IBinder;
         }

        [local]
        class CWallpaperConnection {
            constructor(
                [in] IWallpaperInfo* info,
                [in] IWallpaperData* wallpaper);

            interface IWallpaperConnection;
            interface IIWallpaperConnection;
            interface IServiceConnection;
            interface IBinder;
        }

    } // namespace Wallpaper
    } // namespace Server
    } // namepsace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace Connectivity {

        [local]
        class CTethering {
            constructor(
                [in] IContext* ctx,
                [in] IINetworkManagementService* nmService,
                [in] IINetworkStatsService* statsService,
                [in] ILooper* looper);

            interface IINetworkManagementEventObserver;
            interface IBinder;
        }

        class CVpnObserver {
            constructor(
                [in] HANDLE owner);

            interface IINetworkManagementEventObserver;
            interface IBinder;
        }

        [local]
        class CNat464Xlat {
            constructor(
                [in] IContext* ctx,
                [in] IINetworkManagementService* nmService,
                [in] IIConnectivityManager* connService,
                [in] IHandler* handler);

            interface IINetworkManagementEventObserver;
            interface IBinder;
        }

    } // namespace Connectivity
    } // namespace Server
    } // namepsace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace Content {

    /**
     * {@hide}
     */
    [local]
    class CContentService {
        constructor(
            [in] IContext* ctx,
            [in] Boolean factoryTest);

        interface IIContentService;
        interface IBinder;
    }

    class CSyncStatusObserver {
        constructor(
            [in] ISyncManager* syncMgr);

        interface IISyncStatusObserver;
    }

    class CActiveSyncContext {
        constructor(
            [in] ISyncManager* syncMgr,
            [in] ISyncOperation* syncOperation,
            [in] Int64 historyRowId,
            [in] Int32 syncAdapterUid);

        interface IActiveSyncContext;
        interface IISyncContext;
        interface IBinder;
        interface IServiceConnection;
        interface IProxyDeathRecipient;
    }

    } // namespace Content
    } // namespace Server
    } // namepsace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace Os {

    class CSchedulingPolicyService {
        constructor();

        interface IISchedulingPolicyService;
        interface IBinder;
    }

    } // namespace Os
    } // namespace Server
    } // namepsace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace Display {

    [local]
    class CDisplayManagerService {
        constructor(
            [in] IContext* ctx);

        interface ISystemService;
    }

    [local]
    class CDisplayManagerBinderService {
        constructor(
            [in] ISystemService* displayManagerService);

        interface IIDisplayManager;
        interface IBinder;
    }

    class CMediaProjectionCallback {
        constructor(
            [in] IBinder* appToken,
            [in] IObject* displayAdapter);

        interface IIMediaProjectionCallback;
        interface IBinder;
    }

    class CDisplayPowerState {
        constructor(
            [in] IDisplayBlanker* blanker,
            [in] ILight* backlight,
            [in] IColorFade* electronBeam);

        interface IDisplayPowerState;
    }

    } // namespace Display
    } // namespace Server
    } // namepsace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace Am {

    [local]
    class CActivityManagerService {
        constructor(
            [in] IContext* ctx);

        interface IIActivityManager;
        interface IWatchdogMonitor;
        interface IBatteryCallback;
        interface IBinder;
    }

    class CAppTaskImpl {
        constructor(
            [in] Int32 taskId,
            [in] Int32 callingUid,
            [in] IIActivityManager* host);

        interface IIAppTask;
        interface IBinder;
    }

    class CActivityManagerBootCompletedReceiver {
        constructor(
            [in] IIActivityManager* host);

        interface IIntentReceiver;
        interface IBinder;
    }

    class CActivityManagerSwitchUserReceiver {
        constructor(
            [in] IIActivityManager* host,
            [in] IUserStartedState* uss,
            [in] Boolean foreground,
            [in] Int32 oldUserId,
            [in] Int32 userId);

        interface IIntentReceiver;
        interface IBinder;
    }

    class CActivityManagerNeedStartReceiver {
        constructor();

        interface IIntentReceiver;
        interface IBinder;
    }

    class CActivityManagerPreBootCompletedReceiver {
        constructor(
            [in] IHandler* handler,
            [in] IRunnable* onFinishCallback);

        interface IIntentReceiver;
        interface IBinder;
    }

    class CActivityManagerSystemReadyReceiver {
        constructor();

        interface IIntentReceiver;
        interface IBinder;
    }

    class CActivityManagerShutdownReceiver {
        constructor(
            [in] IIActivityManager* host,
            [in] IUserStartedState* uss);

        interface IIntentReceiver;
        interface IBinder;
    }

    class CActivityManagerStoppingReceiver {
        constructor(
            [in] IIActivityManager* host,
            [in] IUserStartedState* uss,
            [in] IIntent* shutdownIntent,
            [in] IIntentReceiver* shutdownReceiver,
            [in] Int32 userId);

        interface IIntentReceiver;
        interface IBinder;
    }

    class CActivityManagerDispatchUserSwitchCallback {
        constructor(
            [in] IIActivityManager* host,
            [in] Int32 n,
            [in] IUserStartedState* uss,
            [in] Int32 oldUserId,
            [in] Int32 newUserId);

        interface IIRemoteCallback;
        interface IBinder;
    }

    class CBatteryStatsService {
        constructor(
            [in] IFile* systemDir,
            [in] IHandler* handler);

        interface IIBatteryStats;
        interface IBinder;
        interface ILowPowerModeListener;
    }

    class CActivityContainer {
        constructor(
            [in] Int32 stackId,
            [in] IDisplayListener* owner);

        interface IIActivityContainer;
        interface IBinder;
    }

    class CVirtualActivityContainer {
        constructor(
            [in] IActivityRecord* parent,
            [in] IActivityContainerCallback* cb,
            [in] IDisplayListener* owner);

        interface IIActivityContainer;
        interface IBinder;
    }

    class CActivityRecordToken {
        constructor(
            [in] IActivityRecord* activity);

        interface IApplicationToken;
        interface IBinder;
    }

    class CContentProviderConnection {
        constructor(
            [in] HANDLE provider,
            [in] HANDLE client);

        interface IBinder;
    }

    class CPendingAssistExtras {
        constructor(
            [in] IActivityRecord* activity,
            [in] IBundle* extras,
            [in] IIntent* intent,
            [in] String hint,
            [in] Int32 userHandle);

        interface IRunnable;
        interface IBinder;
    }

    class CPendingIntentRecord {
        constructor(
            [in] IIActivityManager* am,
            [in] HANDLE k,
            [in] Int32 u);

        interface IPendingIntentRecord;
        interface IIIntentSender;
        interface IBinder;
    }

    class CPermissionController {
        constructor(
            [in] IIActivityManager* am);

        interface IPermissionController;
        interface IBinder;
    }

    class CProcessStatsService {
        constructor(
            [in] IIActivityManager* am,
            [in] IFile* file);

        interface IIProcessStats;
        interface IBinder;
    }

    class CServiceRecord {
        interface IBinder;
    }

    class CUriPermissionOwnerExternalToken {
        constructor(
            [in] IObject* uriPermissionOwner);

        interface IUriPermissionOwnerExternalToken;
        interface IBinder;
    }

    } // namespace Am
    } // namespace Server
    } // namepsace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace Clipboard {

    [local]
    class CClipboardService {
        constructor(
            [in] IContext* ctx);

        interface IIClipboard;
        interface IBinder;
    }

    } // namespace Clipboard
    } // namespace Server
    } // namepsace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace Net {

    [local]
    class CNetworkPolicyManagerService {
        constructor(
            [in] IContext* ctx,
            [in] IIActivityManager* activityManager,
            [in] IIPowerManager* powerManager,
            [in] IINetworkStatsService* networkStats,
            [in] IINetworkManagementService* networkManagement);

        constructor(
            [in] IContext* ctx,
            [in] IIActivityManager* activityManager,
            [in] IIPowerManager* powerManager,
            [in] IINetworkStatsService* networkStats,
            [in] IINetworkManagementService* networkManagement,
            [in] ITrustedTime* time,
            [in] IFile* systemDir,
            [in] Boolean suppressDefaultPolicy);

        interface IINetworkPolicyManager;
        interface IBinder;
    }

    [local]
    class CNetworkStatsService {
        constructor(
            [in] IContext* ctx,
            [in] IINetworkManagementService* networkManager,
            [in] IIAlarmManager* alarmManager);

        constructor(
            [in] IContext* ctx,
            [in] IINetworkManagementService* networkManager,
            [in] IIAlarmManager* alarmManager,
            [in] ITrustedTime* time,
            [in] IFile* systemDir,
            [in] INetworkStatsSettings* settings);

        interface IINetworkStatsService;
        interface IBinder;
    }

    } // namespace Net
    } // namespace Server
    } // namepsace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace Lights {

    [local]
    class CLegacyFlashlightHack {
        constructor(
            [in] ISystemService* service);

        interface IIHardwareService;
        interface IBinder;
    }

    } // namespace Lights
    } // namespace Server
    } // namepsace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace Location {

    class CGeoFenceListener {
        constructor(
            [in] HANDLE host);

        interface IIGeoFenceListener;
        interface IBinder;
    }

    class CFusedLocationHardwareService {
        constructor(
            [in] IFlpHardwareProvider* php);

        interface IIFusedLocationHardware;
        interface IBinder;
    }

    class CFusedGeofenceHardwareService {
        constructor(
            [in] IFlpHardwareProvider* php);

        interface IIFusedGeofenceHardware;
        interface IBinder;
    }

    [local]
    class CFusedLocationHardwareSecure {
        constructor(
            [in] IIFusedLocationHardware* locationHardware,
            [in] IContext* ctx,
            [in] String permissionId);

        interface IIFusedLocationHardware;
        interface IBinder;
    }

    class CGpsStatusProviderService {
        constructor(
            [in] ILocationProviderInterface* host);

        interface IIGpsStatusProvider;
        interface IBinder;
    }

    class CGpsGeofenceHardwareService {
        constructor(
            [in] ILocationProviderInterface* host);

        interface IIGpsGeofenceHardware;
        interface IBinder;
    }

    class CNetInitiatedListener {
        constructor(
            [in] ILocationProviderInterface* host);

        interface IINetInitiatedListener;
        interface IBinder;
    }

    } // namespace Location
    } // namespace Server
    } // namepsace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace Input {

    [local]
    class CInputManagerService {
        constructor(
            [in] IContext* ctx);

        interface IIInputManager;
        interface IWatchdogMonitor;
        interface IBinder;
    }

    class CInputFilterHost {
        constructor(
            [in] IIInputManager* parent);

        interface IIInputFilterHost;
        interface IBinder;
    }

    class CChainedInputFilterHost {
        constructor(
            [in] IIInputFilter* filter,
            [in] IIInputFilterHost* next,
            [in] IIInputManager* host);

        interface IIInputFilterHost;
        interface IBinder;
    }

    } // Input
    } // Server
    } // Droid
    } // Elastos

    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace Notification {

    [local]
    class CConditionProviders {
        constructor(
            [in] IContext* ctx,
            [in] IHandler* handler,
            [in] IInterface* userProfiles,
            [in] IInterface* zenModeHelper);

        interface IManagedServices;
    }

    class CNotificationIntrusivenessExtractor {
        constructor();

        interface INotificationIntrusivenessExtractor;
        interface INotificationSignalExtractor;
    }

    [local]
    class CNotificationManagerService {
        constructor(
            [in] IContext* ctx);

        interface ISystemService;
    }

    class CNotificationListeners {
        constructor(
            [in] IInterface* host);

        interface IManagedServices;
    }

    [local]
    class CNotificationManagerBinderService {
        constructor(
            [in] ISystemService* service);

        interface IINotificationManager;
        interface IBinder;
    }

    class CPackagePriorityExtractor {
        constructor();

        interface IPackagePriorityExtractor;
        interface INotificationSignalExtractor;
    }

    class CPackageVisibilityExtractor {
        constructor();

        interface IPackageVisibilityExtractor;
        interface INotificationSignalExtractor;
    }

    class CStatusBarNotificationHolder {
        constructor(
            [in] IStatusBarNotification* value);

        interface IIStatusBarNotificationHolder;
        interface IBinder;
    }

    class CValidateNotificationPeople {
        constructor();

        interface IValidateNotificationPeople;
        interface INotificationSignalExtractor;
    }

    } // namespace Notification
    } // namespace Server
    } // namepsace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace Power {

    [local]
    class CPowerManagerServiceBinderService {
        constructor(
            [in] ISystemService* service);

        interface IIPowerManager;
        interface IBinder;
    }

    class CMountShutdownObserver {
        constructor(
            [in] IThread* host);

        interface IIMountShutdownObserver;
        interface IBinder;
    }

    } // Power
    } // namespace Server
    } // namepsace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace AppWidget {

    [local]
    class CAppWidgetService {
        constructor(
            [in] IContext* ctx);

        interface ISystemService;
    }

    [local]
    class CAppWidgetServiceImpl {
        constructor(
            [in] IContext* ctx);

        interface IIAppWidgetService;
        interface IWidgetBackupProvider;
        interface IBinder;
    }

    class CAppWidgetServiceImplBroadcastReceiver {
        constructor();

        constructor(
            [in] IInterface* owner);

        interface IBroadcastReceiver;
    }

    } // namespace AppWidget
    } // namespace Server
    } // namepsace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace DevicePolicy {

    [local]
    class CDevicePolicyManagerService {
         constructor(
             [in] IContext* ctx);

         interface IIDevicePolicyManager;
         interface IBinder;
    }

    class CDevicePolicyManagerServiceSetupContentObserver {
         constructor(
            [in] IHandler* handler,
            [in] IIDevicePolicyManager* host);

         interface IContentObserver;
    }

    } // namespace DevicePolicy
    } // namespace Server
    } // namepsace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace Storage {

    [local]
    class CDeviceStorageMonitorService {
        constructor(
            [in] IContext* ctx);

        interface ISystemService;
    }

    [local]
    class CCachePackageDataObserver {
        constructor(
            [in] ISystemService* host);

        interface IIPackageDataObserver;
        interface IBinder;
    }

    } // namespace Storage
    } // namespace Server
    } // namepsace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace Twilight {

    [local]
    class CTwilightService {
        constructor(
            [in] IContext* ctx);

        interface ISystemService;
    }

    } // namespace Twilight
    } // namespace Server
    } // namepsace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace Hdmi {

    // all class of action in this directory should have car class to use car object in this package
    class CDeviceDiscoveryAction {
        constructor(
            [in] IHdmiCecLocalDevice* source,
            [in] IDeviceDiscoveryActionDeviceDiscoveryCallback* ddCallback);

        interface IDeviceDiscoveryAction;
    }

    class CDevicePowerStatusAction {
        interface IDevicePowerStatusAction;
    }

    class CDeviceSelectAction {
        constructor(
            [in] IHdmiCecLocalDeviceTv* source,
            [in] IHdmiDeviceInfo* target,
            [in] IIHdmiControlCallback* hcCallback);

        interface IDeviceSelectAction;
    }

    class CHdmiControlServiceBinderService {
        constructor(
            [in] IHdmiControlService* host);

        interface IBinder;
        interface IIHdmiControlService;
    }

    class CHotplugDetectionAction {
        constructor(
            [in] IHdmiCecLocalDevice* source);

        interface IHotplugDetectionAction;
    }

    class CNewDeviceAction {
        constructor(
            [in] IHdmiCecLocalDevice* source,
            [in] Int32 deviceLogicalAddress,
            [in] Int32 devicePhysicalAddress);

        interface INewDeviceAction;
    }

    class COneTouchPlayAction {
        interface IOneTouchPlayAction;
    }

    [deprecated]
    class COneTouchRecordAction {
        constructor(
            [in] IHdmiCecLocalDevice* source,
            [in] Int32 recorderAddress,
            [in] ArrayOf<Byte>* recordSource);

        interface IOneTouchRecordAction;
    }

    class CPowerStatusMonitorAction {
        constructor(
            [in] IHdmiCecLocalDevice* source);

        interface IPowerStatusMonitorAction;
    }

    class CRequestArcInitiationAction {
        constructor(
            [in] IHdmiCecLocalDevice* source,
            [in] Int32 avrAddress);

        interface IRequestArcInitiationAction;
    }

    class CRequestArcTerminationAction {
        constructor(
            [in] IHdmiCecLocalDevice* source,
            [in] Int32 avrAddress);

        interface IRequestArcTerminationAction;
    }

    class CRoutingControlAction {
        constructor(
            [in] IHdmiCecLocalDevice* localDevice,
            [in] Int32 path,
            [in] Boolean queryDevicePowerStatus,
            [in] IIHdmiControlCallback* hcCallback);

        interface IRoutingControlAction;
    }

    class CSendKeyAction {
        constructor(
            [in] IHdmiCecLocalDevice* source,
            [in] Int32 targetAddress,
            [in] Int32 keycode);

        interface ISendKeyAction;
    }

    class CSetArcTransmissionStateAction {
        constructor(
            [in] IHdmiCecLocalDevice* source,
            [in] Int32 avrAddress,
            [in] Boolean enabled);

        interface ISetArcTransmissionStateAction;
    }

    class CSystemAudioActionFromAvr {
        constructor(
            [in] IHdmiCecLocalDevice* source,
            [in] Int32 avrAddress,
            [in] Boolean targetStatus,
            [in] IIHdmiControlCallback* hcCallback);

        interface ISystemAudioActionFromAvr;
    }

    class CSystemAudioActionFromTv {
        constructor(
            [in] IHdmiCecLocalDevice* sourceAddress,
            [in] Int32 avrAddress,
            [in] Boolean targetStatus,
            [in] IIHdmiControlCallback* hcCallback);

        interface ISystemAudioActionFromTv;
    }

    class CSystemAudioAutoInitiationAction {
        constructor(
            [in] IHdmiCecLocalDevice* source,
            [in] Int32 avrAddress);

        interface ISystemAudioAutoInitiationAction;
    }

    class CSystemAudioStatusAction {
        constructor(
            [in] IHdmiCecLocalDevice* source,
            [in] Int32 avrAddress,
            [in] IIHdmiControlCallback* hcCallback);

        interface ISystemAudioStatusAction;
    }

    [deprecated]
    class CTimerRecordingAction {
        constructor(
            [in] IHdmiCecLocalDevice* source,
            [in] Int32 recorderAddress,
            [in] Int32 sourceType,
            [in] ArrayOf<Byte>* recordSource);

        interface ITimerRecordingAction;
    }

    class CVolumeControlAction {
        constructor(
            [in] IHdmiCecLocalDevice* source,
            [in] Int32 avrAddress,
            [in] Boolean isVolumeUp);

        interface IVolumeControlAction;
    }

    } // namespace Hdmi
    } // namespace Server
    } // namespace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace Wifi {
    namespace P2p {

    [local]
    class CWifiP2pService {
        constructor(
            [in] IContext* ctx);

        interface ISystemService;
    }

    [local]
    class CWifiP2pServiceImpl {
        constructor(
            [in] IContext* ctx);

        interface IIWifiP2pManager;
        interface IBinder;
    }

    } // namespace P2p
    } // namespace Wifi
    } // namespace Server
    } // namespace Droid
    } // namespace Elastos

    namespace Elastos {
    namespace Droid {
    namespace Server {
    namespace Wifi {

    [local]
    class CRttService {
        constructor(
            [in] IContext* ctx);

        interface ISystemService;
    }

    [local]
    class CRttServiceImpl {
        constructor(
            [in] IContext* ctx);

        interface IIRttManager;
        interface IBinder;
    }

    [local]
    class CWifiNetworkScoreCache {
        constructor(
            [in] IContext* ctx);

        interface IINetworkScoreCache;
        interface IBinder;
    }

    [local]
    class CWifiScanningService {
        constructor(
            [in] IContext* ctx);

        interface ISystemService;
    }

    [local]
    class CWifiScanningServiceImpl {
        constructor(
            [in] IContext* ctx);

        interface IIWifiScanner;
        interface IBinder;
    }

    [local]
    class CWifiService {
        constructor(
            [in] IContext* ctx);

        interface ISystemService;
    }

    [local]
    class CWifiServiceImpl {
        constructor(
            [in] IContext* ctx);

        interface IIWifiManager;
        interface IBinder;
    }

    } // namespace Wifi
    } // namespace Server
    } // namespace Droid
    } // namespace Elastos

}
