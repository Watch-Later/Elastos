//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

//This file is autogenerated for
//    SurfaceTexturePlatformWrapper.java
//put this file at the end of the include list
//so the type definition used in this file will be found
#ifndef ELASTOS_SURFACETEXTUREPLATFORMWRAPPER_CALLBACK_DEC_HH
#define ELASTOS_SURFACETEXTUREPLATFORMWRAPPER_CALLBACK_DEC_HH


#ifdef __cplusplus
extern "C"
{
#endif
    extern void Elastos_SurfaceTexturePlatformWrapper_InitCallback(HANDLE cb);
#ifdef __cplusplus
}
#endif

namespace Elastos {
namespace Droid {
namespace Webkit {
namespace Webview {
namespace Chromium {
namespace Ui {
namespace Gl {

struct ElaSurfaceTexturePlatformWrapperCallback
{
    AutoPtr<IInterface> (*elastos_SurfaceTexturePlatformWrapper_create)(Int32 textureId);
    AutoPtr<IInterface> (*elastos_SurfaceTexturePlatformWrapper_createSingleBuffered)(Int32 textureId);
    void (*elastos_SurfaceTexturePlatformWrapper_destroy)(IInterface* surfaceTexture);
    void (*elastos_SurfaceTexturePlatformWrapper_setFrameAvailableCallback)(IInterface* surfaceTexture, Int64 nativeSurfaceTextureListener);
    void (*elastos_SurfaceTexturePlatformWrapper_updateTexImage)(IInterface* surfaceTexture);
    void (*elastos_SurfaceTexturePlatformWrapper_releaseTexImage)(IInterface* surfaceTexture);
    void (*elastos_SurfaceTexturePlatformWrapper_setDefaultBufferSize)(IInterface* surfaceTexture, Int32 width, Int32 height);
    void (*elastos_SurfaceTexturePlatformWrapper_getTransformMatrix)(IInterface* surfaceTexture, ArrayOf<Float>* matrix);
    void (*elastos_SurfaceTexturePlatformWrapper_attachToGLContext)(IInterface* surfaceTexture, Int32 texName);
    void (*elastos_SurfaceTexturePlatformWrapper_detachFromGLContext)(IInterface* surfaceTexture);
};

void* SurfaceTexturePlatformWrapper::ElaSurfaceTexturePlatformWrapperCallback_Init()
{
    static ElaSurfaceTexturePlatformWrapperCallback sElaSurfaceTexturePlatformWrapperCallback;

    sElaSurfaceTexturePlatformWrapperCallback.elastos_SurfaceTexturePlatformWrapper_create = &SurfaceTexturePlatformWrapper::Create;
    sElaSurfaceTexturePlatformWrapperCallback.elastos_SurfaceTexturePlatformWrapper_createSingleBuffered = &SurfaceTexturePlatformWrapper::CreateSingleBuffered;
    sElaSurfaceTexturePlatformWrapperCallback.elastos_SurfaceTexturePlatformWrapper_destroy = &SurfaceTexturePlatformWrapper::Destroy;
    sElaSurfaceTexturePlatformWrapperCallback.elastos_SurfaceTexturePlatformWrapper_setFrameAvailableCallback = &SurfaceTexturePlatformWrapper::SetFrameAvailableCallback;
    sElaSurfaceTexturePlatformWrapperCallback.elastos_SurfaceTexturePlatformWrapper_updateTexImage = &SurfaceTexturePlatformWrapper::UpdateTexImage;
    sElaSurfaceTexturePlatformWrapperCallback.elastos_SurfaceTexturePlatformWrapper_releaseTexImage = &SurfaceTexturePlatformWrapper::ReleaseTexImage;
    sElaSurfaceTexturePlatformWrapperCallback.elastos_SurfaceTexturePlatformWrapper_setDefaultBufferSize = &SurfaceTexturePlatformWrapper::SetDefaultBufferSize;
    sElaSurfaceTexturePlatformWrapperCallback.elastos_SurfaceTexturePlatformWrapper_getTransformMatrix = &SurfaceTexturePlatformWrapper::GetTransformMatrix;
    sElaSurfaceTexturePlatformWrapperCallback.elastos_SurfaceTexturePlatformWrapper_attachToGLContext = &SurfaceTexturePlatformWrapper::AttachToGLContext;
    sElaSurfaceTexturePlatformWrapperCallback.elastos_SurfaceTexturePlatformWrapper_detachFromGLContext = &SurfaceTexturePlatformWrapper::DetachFromGLContext;

    Elastos_SurfaceTexturePlatformWrapper_InitCallback((HANDLE)&sElaSurfaceTexturePlatformWrapperCallback);
    return &sElaSurfaceTexturePlatformWrapperCallback;
}

static void* sPElaSurfaceTexturePlatformWrapperCallback = SurfaceTexturePlatformWrapper::ElaSurfaceTexturePlatformWrapperCallback_Init();

} // namespace Gl
} // namespace Ui
} // namespace Chromium
} // namespace Webview
} // namespace Webkit
} // namespace Droid
} // namespace Elastos

#endif //ELASTOS_SURFACETEXTUREPLATFORMWRAPPER_CALLBACK_DEC_HH
