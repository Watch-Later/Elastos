//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

//This file is autogenerated for
//    AwContents.java
//put this file at the end of the include list
//so the type definition used in this file will be found
#ifndef ELASTOS_AWCONTENTS_CALLBACK_DEC_HH
#define ELASTOS_AWCONTENTS_CALLBACK_DEC_HH


#ifdef __cplusplus
extern "C"
{
#endif
    extern HANDLE Elastos_AwContents_nativeInit(IInterface* browserContext);
    extern void Elastos_AwContents_nativeSetAwDrawSWFunctionTable(HANDLE functionTablePointer);
    extern void Elastos_AwContents_nativeSetAwDrawGLFunctionTable(HANDLE functionTablePointer);
    extern HANDLE Elastos_AwContents_nativeGetAwDrawGLFunction();
    extern Int32 Elastos_AwContents_nativeGetNativeInstanceCount();
    extern void Elastos_AwContents_nativeSetShouldDownloadFavicons();
    extern void Elastos_AwContents_nativeDestroy(HANDLE nativeAwContents);
    extern void Elastos_AwContents_nativeSetJavaPeers(IInterface* caller,HANDLE nativeAwContents,IInterface* awContents,IInterface* webViewWebContentsDelegate,IInterface* contentsClientBridge,IInterface* ioThreadClient,IInterface* navigationInterceptionDelegate);
    extern HANDLE Elastos_AwContents_nativeGetWebContents(IInterface* caller,HANDLE nativeAwContents);
    extern void Elastos_AwContents_nativeDocumentHasImages(IInterface* caller,HANDLE nativeAwContents,IInterface* message);
    extern void Elastos_AwContents_nativeGenerateMHTML(IInterface* caller,HANDLE nativeAwContents,const String& path,IInterface* callback);
    extern void Elastos_AwContents_nativeAddVisitedLinks(IInterface* caller,HANDLE nativeAwContents,ArrayOf<String>* visitedLinks);
    extern Boolean Elastos_AwContents_nativeOnDraw(IInterface* caller,HANDLE nativeAwContents,IInterface* canvas,Boolean isHardwareAccelerated,Int32 scrollX,Int32 scrollY,Int32 visibleLeft,Int32 visibleTop,Int32 visibleRight,Int32 visibleBottom);
    extern void Elastos_AwContents_nativeFindAllAsync(IInterface* caller,HANDLE nativeAwContents,const String& searchString);
    extern void Elastos_AwContents_nativeFindNext(IInterface* caller,HANDLE nativeAwContents,Boolean forward);
    extern void Elastos_AwContents_nativeClearMatches(IInterface* caller,HANDLE nativeAwContents);
    extern void Elastos_AwContents_nativeClearCache(IInterface* caller,HANDLE nativeAwContents,Boolean includeDiskFiles);
    extern AutoPtr<ArrayOf<Byte> > Elastos_AwContents_nativeGetCertificate(IInterface* caller,HANDLE nativeAwContents);
    extern void Elastos_AwContents_nativeRequestNewHitTestDataAt(IInterface* caller,HANDLE nativeAwContents,Int32 x,Int32 y);
    extern void Elastos_AwContents_nativeUpdateLastHitTestData(IInterface* caller,HANDLE nativeAwContents);
    extern void Elastos_AwContents_nativeOnSizeChanged(IInterface* caller,HANDLE nativeAwContents,Int32 w,Int32 h,Int32 ow,Int32 oh);
    extern void Elastos_AwContents_nativeScrollTo(IInterface* caller,HANDLE nativeAwContents,Int32 x,Int32 y);
    extern void Elastos_AwContents_nativeSetViewVisibility(IInterface* caller,HANDLE nativeAwContents,Boolean visible);
    extern void Elastos_AwContents_nativeSetWindowVisibility(IInterface* caller,HANDLE nativeAwContents,Boolean visible);
    extern void Elastos_AwContents_nativeSetIsPaused(IInterface* caller,HANDLE nativeAwContents,Boolean paused);
    extern void Elastos_AwContents_nativeOnAttachedToWindow(IInterface* caller,HANDLE nativeAwContents,Int32 w,Int32 h);
    extern void Elastos_AwContents_nativeOnDetachedFromWindow(HANDLE nativeAwContents);
    extern void Elastos_AwContents_nativeSetDipScale(IInterface* caller,HANDLE nativeAwContents,Float dipScale);
    extern AutoPtr<ArrayOf<Byte> > Elastos_AwContents_nativeGetOpaqueState(IInterface* caller,HANDLE nativeAwContents);
    extern Boolean Elastos_AwContents_nativeRestoreFromOpaqueState(IInterface* caller,HANDLE nativeAwContents,ArrayOf<Byte>* state);
    extern HANDLE Elastos_AwContents_nativeReleasePopupAwContents(IInterface* caller,HANDLE nativeAwContents);
    extern void Elastos_AwContents_nativeFocusFirstNode(IInterface* caller,HANDLE nativeAwContents);
    extern void Elastos_AwContents_nativeSetBackgroundColor(IInterface* caller,HANDLE nativeAwContents,Int32 color);
    extern HANDLE Elastos_AwContents_nativeGetAwDrawGLViewContext(IInterface* caller,HANDLE nativeAwContents);
    extern HANDLE Elastos_AwContents_nativeCapturePicture(IInterface* caller,HANDLE nativeAwContents,Int32 width,Int32 height);
    extern void Elastos_AwContents_nativeEnableOnNewPicture(IInterface* caller,HANDLE nativeAwContents,Boolean enabled);
    extern void Elastos_AwContents_nativeClearView(IInterface* caller,HANDLE nativeAwContents);
    extern void Elastos_AwContents_nativeSetExtraHeadersForUrl(IInterface* caller,HANDLE nativeAwContents,const String& url,const String& extraHeaders);
    extern void Elastos_AwContents_nativeInvokeGeolocationCallback(IInterface* caller,HANDLE nativeAwContents,Boolean value,const String& requestingFrame);
    extern void Elastos_AwContents_nativeSetJsOnlineProperty(IInterface* caller,HANDLE nativeAwContents,Boolean networkUp);
    extern void Elastos_AwContents_nativeTrimMemory(IInterface* caller,HANDLE nativeAwContents,Int32 level,Boolean visible);
    extern void Elastos_AwContents_nativeCreatePdfExporter(IInterface* caller,HANDLE nativeAwContents,IInterface* awPdfExporter);
    extern void Elastos_AwContents_nativePreauthorizePermission(IInterface* caller,HANDLE nativeAwContents,const String& origin,Int64 resources);
    extern void Elastos_AwContents_InitCallback(HANDLE cb);
#ifdef __cplusplus
}
#endif


namespace Elastos {
namespace Droid {
namespace Webkit {
namespace Webview {
namespace Chromium {
namespace AndroidWebview {

struct ElaAwContentsCallback
{
    void (*elastos_AwContents_onDocumentHasImagesResponse)(Boolean result, IInterface* message);
    void (*elastos_AwContents_onReceivedTouchIconUrl)(IInterface* obj, const String& url, Boolean precomposed);
    void (*elastos_AwContents_onReceivedIcon)(IInterface* obj, IInterface* bitmap);
    void (*elastos_AwContents_generateMHTMLCallback)(const String& path, Int64 size, IInterface* callback);
    void (*elastos_AwContents_onReceivedHttpAuthRequest)(IInterface* obj, IInterface* handler, const String& host, const String& realm);
    void (*elastos_AwContents_onGeolocationPermissionsShowPrompt)(IInterface* obj, const String& origin);
    void (*elastos_AwContents_onGeolocationPermissionsHidePrompt)(IInterface* obj);
    void (*elastos_AwContents_onPermissionRequest)(IInterface* obj, IInterface* awPermissionRequest);
    void (*elastos_AwContents_onPermissionRequestCanceled)(IInterface* obj, IInterface* awPermissionRequest);
    void (*elastos_AwContents_onFindResultReceived)(IInterface* obj, Int32 activeMatchOrdinal, Int32 numberOfMatches, Boolean isDoneCounting);
    void (*elastos_AwContents_onNewPicture)(IInterface* obj);
    void (*elastos_AwContents_updateHitTestData)(IInterface* obj, Int32 type, const String& extra, const String& href, const String& anchorText, const String& imgSrc);
    Boolean (*elastos_AwContents_requestDrawGL)(IInterface* obj, IInterface* canvas, Boolean waitForCompletion);
    void (*elastos_AwContents_postInvalidateOnAnimation)(IInterface* obj);
    void (*elastos_AwContents_invalidateOnFunctorDestroy)(IInterface* obj);
    AutoPtr<ArrayOf<Int32> > (*elastos_AwContents_getLocationOnScreen)(IInterface* obj);
    void (*elastos_AwContents_onWebLayoutPageScaleFactorChanged)(IInterface* obj, Float webLayoutPageScaleFactor);
    void (*elastos_AwContents_onWebLayoutContentsSizeChanged)(IInterface* obj, Int32 widthCss, Int32 heightCss);
    void (*elastos_AwContents_scrollContainerViewTo)(IInterface* obj, Int32 x, Int32 y);
    Boolean (*elastos_AwContents_isFlingActive)(IInterface* obj);
    void (*elastos_AwContents_updateScrollState)(IInterface* obj, Int32 maxContainerViewScrollOffsetX, Int32 maxContainerViewScrollOffsetY, Int32 contentWidthDip, Int32 contentHeightDip, Float pageScaleFactor, Float minPageScaleFactor, Float maxPageScaleFactor);
    void (*elastos_AwContents_setAwAutofillClient)(IInterface* obj, IInterface* client);
    void (*elastos_AwContents_didOverscroll)(IInterface* obj, Int32 deltaX, Int32 deltaY);
    Boolean (*elastos_AwContents_useLegacyGeolocationPermissionAPI)(IInterface* obj);
};

void* AwContents::ElaAwContentsCallback_Init()
{
    static ElaAwContentsCallback sElaAwContentsCallback;

    sElaAwContentsCallback.elastos_AwContents_onDocumentHasImagesResponse = &AwContents::OnDocumentHasImagesResponse;
    sElaAwContentsCallback.elastos_AwContents_onReceivedTouchIconUrl = &AwContents::OnReceivedTouchIconUrl;
    sElaAwContentsCallback.elastos_AwContents_onReceivedIcon = &AwContents::OnReceivedIcon;
    sElaAwContentsCallback.elastos_AwContents_generateMHTMLCallback = &AwContents::GenerateMHTMLCallback;
    sElaAwContentsCallback.elastos_AwContents_onReceivedHttpAuthRequest = &AwContents::OnReceivedHttpAuthRequest;
    sElaAwContentsCallback.elastos_AwContents_onGeolocationPermissionsShowPrompt = &AwContents::OnGeolocationPermissionsShowPrompt;
    sElaAwContentsCallback.elastos_AwContents_onGeolocationPermissionsHidePrompt = &AwContents::OnGeolocationPermissionsHidePrompt;
    sElaAwContentsCallback.elastos_AwContents_onPermissionRequest = &AwContents::OnPermissionRequest;
    sElaAwContentsCallback.elastos_AwContents_onPermissionRequestCanceled = &AwContents::OnPermissionRequestCanceled;
    sElaAwContentsCallback.elastos_AwContents_onFindResultReceived = &AwContents::OnFindResultReceived;
    sElaAwContentsCallback.elastos_AwContents_onNewPicture = &AwContents::OnNewPicture;
    sElaAwContentsCallback.elastos_AwContents_updateHitTestData = &AwContents::UpdateHitTestData;
    sElaAwContentsCallback.elastos_AwContents_requestDrawGL = &AwContents::RequestDrawGL;
    sElaAwContentsCallback.elastos_AwContents_postInvalidateOnAnimation = &AwContents::PostInvalidateOnAnimation;
    sElaAwContentsCallback.elastos_AwContents_invalidateOnFunctorDestroy = &AwContents::InvalidateOnFunctorDestroy;
    sElaAwContentsCallback.elastos_AwContents_getLocationOnScreen = &AwContents::GetLocationOnScreen;
    sElaAwContentsCallback.elastos_AwContents_onWebLayoutPageScaleFactorChanged = &AwContents::OnWebLayoutPageScaleFactorChanged;
    sElaAwContentsCallback.elastos_AwContents_onWebLayoutContentsSizeChanged = &AwContents::OnWebLayoutContentsSizeChanged;
    sElaAwContentsCallback.elastos_AwContents_scrollContainerViewTo = &AwContents::ScrollContainerViewTo;
    sElaAwContentsCallback.elastos_AwContents_isFlingActive = &AwContents::IsFlingActive;
    sElaAwContentsCallback.elastos_AwContents_updateScrollState = &AwContents::UpdateScrollState;
    sElaAwContentsCallback.elastos_AwContents_setAwAutofillClient = &AwContents::SetAwAutofillClient;
    sElaAwContentsCallback.elastos_AwContents_didOverscroll = &AwContents::DidOverscroll;
    sElaAwContentsCallback.elastos_AwContents_useLegacyGeolocationPermissionAPI = &AwContents::UseLegacyGeolocationPermissionAPI;

    Elastos_AwContents_InitCallback((HANDLE)&sElaAwContentsCallback);
    return &sElaAwContentsCallback;
}

static void* sPElaAwContentsCallback = AwContents::ElaAwContentsCallback_Init();

} // namespace AndroidWebview
} // namespace Chromium
} // namespace Webview
} // namespace Webkit
} // namespace Droid
} // namespace Elastos

#endif //ELASTOS_AWCONTENTS_CALLBACK_DEC_HH
