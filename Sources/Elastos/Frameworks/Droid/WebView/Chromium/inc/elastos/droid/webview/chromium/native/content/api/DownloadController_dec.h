//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

//This file is autogenerated for
//    DownloadController.java
//put this file at the end of the include list
//so the type definition used in this file will be found
#ifndef ELASTOS_DOWNLOADCONTROLLER_CALLBACK_DEC_HH
#define ELASTOS_DOWNLOADCONTROLLER_CALLBACK_DEC_HH


#ifdef __cplusplus
extern "C"
{
#endif
    extern void Elastos_DownloadController_nativeInit(IInterface* caller);
    extern void Elastos_DownloadController_InitCallback(HANDLE cb);
#ifdef __cplusplus
}
#endif


namespace Elastos {
namespace Droid {
namespace Webkit {
namespace Webview {
namespace Chromium {
namespace Content {
namespace Browser {

struct ElaDownloadControllerCallback
{
    AutoPtr<IInterface> (*elastos_DownloadController_getInstance)();
    void (*elastos_DownloadController_newHttpGetDownload)(IInterface* obj, IInterface* view, const String& url, const String& userAgent, const String& contentDisposition, const String& mimeType, const String& cookie, const String& referer, const String& filename, Int64 contentLength);
    void (*elastos_DownloadController_onDownloadStarted)(IInterface* obj, IInterface* view, const String& filename, const String& mimeType);
    void (*elastos_DownloadController_onDownloadCompleted)(IInterface* obj, IInterface* context, const String& url, const String& mimeType, const String& filename, const String& path, Int64 contentLength, Boolean successful, Int32 downloadId);
    void (*elastos_DownloadController_onDownloadUpdated)(IInterface* obj, IInterface* context, const String& url, const String& mimeType, const String& filename, const String& path, Int64 contentLength, Boolean successful, Int32 downloadId, Int32 percentCompleted, Int64 timeRemainingInMs);
    void (*elastos_DownloadController_onDangerousDownload)(IInterface* obj, IInterface* view, const String& filename, Int32 downloadId);
};

void* DownloadController::ElaDownloadControllerCallback_Init()
{
    static ElaDownloadControllerCallback sElaDownloadControllerCallback;

    sElaDownloadControllerCallback.elastos_DownloadController_getInstance = &DownloadController::GetInstance;
    sElaDownloadControllerCallback.elastos_DownloadController_newHttpGetDownload = &DownloadController::NewHttpGetDownload;
    sElaDownloadControllerCallback.elastos_DownloadController_onDownloadStarted = &DownloadController::OnDownloadStarted;
    sElaDownloadControllerCallback.elastos_DownloadController_onDownloadCompleted = &DownloadController::OnDownloadCompleted;
    sElaDownloadControllerCallback.elastos_DownloadController_onDownloadUpdated = &DownloadController::OnDownloadUpdated;
    sElaDownloadControllerCallback.elastos_DownloadController_onDangerousDownload = &DownloadController::OnDangerousDownload;

    Elastos_DownloadController_InitCallback((HANDLE)&sElaDownloadControllerCallback);
    return &sElaDownloadControllerCallback;
}

static void* sPElaDownloadControllerCallback = DownloadController::ElaDownloadControllerCallback_Init();

} // namespace Browser
} // namespace Content
} // namespace Chromium
} // namespace Webview
} // namespace Webkit
} // namespace Droid
} // namespace Elastos

#endif //ELASTOS_DOWNLOADCONTROLLER_CALLBACK_DEC_HH
