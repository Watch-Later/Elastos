//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

//This file is autogenerated for
//    HashSet.class
//put this file at the end of the include list
//so the type definition used in this file will be found
#ifndef ELASTOS_HASHSET_CALLBACK_DEC_HH
#define ELASTOS_HASHSET_CALLBACK_DEC_HH


#ifdef __cplusplus
extern "C"
{
#endif
    extern void Elastos_HashSet_InitCallback(HANDLE cb);
#ifdef __cplusplus
}
#endif

namespace Elastos {
namespace Droid {
namespace Webkit {
namespace Webview {
namespace Chromium {
namespace Api {

struct ElaHashSetCallback
{
    Boolean (*elastos_HashSet_add)(IInterface* obj, IInterface* p0);
    void (*elastos_HashSet_clear)(IInterface* obj);
    AutoPtr<IInterface> (*elastos_HashSet_clone)(IInterface* obj);
    Boolean (*elastos_HashSet_contains)(IInterface* obj, IInterface* p0);
    Boolean (*elastos_HashSet_isEmpty)(IInterface* obj);
    AutoPtr<IInterface> (*elastos_HashSet_iterator)(IInterface* obj);
    Boolean (*elastos_HashSet_remove)(IInterface* obj, IInterface* p0);
    Int32 (*elastos_HashSet_size)(IInterface* obj);
    AutoPtr<IInterface> (*elastos_HashSet_ConstructorJUHS)();
    AutoPtr<IInterface> (*elastos_HashSet_ConstructorJUHS_I)(Int32 p0);
    AutoPtr<IInterface> (*elastos_HashSet_ConstructorJUHS_I_F)(Int32 p0, Float p1);
    AutoPtr<IInterface> (*elastos_HashSet_ConstructorJUHS_JUC)(IInterface* extends);
};

void* AwHashSet::ElaHashSetCallback_Init()
{
    static ElaHashSetCallback sElaHashSetCallback;

    sElaHashSetCallback.elastos_HashSet_add = &AwHashSet::Add;
    sElaHashSetCallback.elastos_HashSet_clear = &AwHashSet::Clear;
    sElaHashSetCallback.elastos_HashSet_clone = &AwHashSet::Clone;
    sElaHashSetCallback.elastos_HashSet_contains = &AwHashSet::Contains;
    sElaHashSetCallback.elastos_HashSet_isEmpty = &AwHashSet::IsEmpty;
    sElaHashSetCallback.elastos_HashSet_iterator = &AwHashSet::Iterator;
    sElaHashSetCallback.elastos_HashSet_remove = &AwHashSet::Remove;
    sElaHashSetCallback.elastos_HashSet_size = &AwHashSet::Size;
    sElaHashSetCallback.elastos_HashSet_ConstructorJUHS = &AwHashSet::ConstructorJUHS;
    sElaHashSetCallback.elastos_HashSet_ConstructorJUHS_I = &AwHashSet::ConstructorJUHSI;
    sElaHashSetCallback.elastos_HashSet_ConstructorJUHS_I_F = &AwHashSet::ConstructorJUHSIF;
    sElaHashSetCallback.elastos_HashSet_ConstructorJUHS_JUC = &AwHashSet::ConstructorJUHSJUC;

    Elastos_HashSet_InitCallback((HANDLE)&sElaHashSetCallback);
    return &sElaHashSetCallback;
}

static void* sPElaHashSetCallback = AwHashSet::ElaHashSetCallback_Init();

} // namespace Api
} // namespace Chromium
} // namespace Webview
} // namespace Webkit
} // namespace Droid
} // namespace Elastos

#endif //ELASTOS_HASHSET_CALLBACK_DEC_HH
