//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

//This file is autogenerated for
//    ChildProcessService.java
//put this file at the end of the include list
//so the type definition used in this file will be found
#ifndef ELASTOS_CHILDPROCESSSERVICE_CALLBACK_DEC_HH
#define ELASTOS_CHILDPROCESSSERVICE_CALLBACK_DEC_HH


#ifdef __cplusplus
extern "C"
{
#endif
    extern void Elastos_ChildProcessService_nativeInitChildProcess(IInterface* applicationContext,IInterface* service,ArrayOf<Int32>* extraFileIds,ArrayOf<Int32>* extraFileFds,Int32 cpuCount,Int64 cpuFeatures);
    extern void Elastos_ChildProcessService_nativeExitChildProcess();
    extern void Elastos_ChildProcessService_nativeShutdownMainThread(IInterface* caller);
    extern void Elastos_ChildProcessService_InitCallback(HANDLE cb);
#ifdef __cplusplus
}
#endif


namespace Elastos {
namespace Droid {
namespace Webkit {
namespace Webview {
namespace Chromium {
namespace Content {
namespace App {

struct ElaChildProcessServiceCallback
{
    void (*elastos_ChildProcessService_establishSurfaceTexturePeer)(IInterface* obj, Int32 pid, IInterface* surfaceObject, Int32 primaryID, Int32 secondaryID);
    AutoPtr<IInterface> (*elastos_ChildProcessService_getViewSurface)(IInterface* obj, Int32 surfaceId);
    AutoPtr<IInterface> (*elastos_ChildProcessService_getSurfaceTextureSurface)(IInterface* obj, Int32 primaryId, Int32 secondaryId);
};

void* ChildProcessService::ElaChildProcessServiceCallback_Init()
{
    static ElaChildProcessServiceCallback sElaChildProcessServiceCallback;

    sElaChildProcessServiceCallback.elastos_ChildProcessService_establishSurfaceTexturePeer = &ChildProcessService::EstablishSurfaceTexturePeer;
    sElaChildProcessServiceCallback.elastos_ChildProcessService_getViewSurface = &ChildProcessService::GetViewSurface;
    sElaChildProcessServiceCallback.elastos_ChildProcessService_getSurfaceTextureSurface = &ChildProcessService::GetSurfaceTextureSurface;

    Elastos_ChildProcessService_InitCallback((HANDLE)&sElaChildProcessServiceCallback);
    return &sElaChildProcessServiceCallback;
}

static void* sPElaChildProcessServiceCallback = ChildProcessService::ElaChildProcessServiceCallback_Init();


} // namespace App
} // namespace Content
} // namespace Chromium
} // namespace Webview
} // namespace Webkit
} // namespace Droid
} // namespace Elastos

#endif //ELASTOS_CHILDPROCESSSERVICE_CALLBACK_DEC_HH
