//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

//This file is autogenerated for
//    ContentViewRenderView.java
//put this file at the end of the include list
//so the type definition used in this file will be found
#ifndef ELASTOS_CONTENTVIEWRENDERVIEW_CALLBACK_DEC_HH
#define ELASTOS_CONTENTVIEWRENDERVIEW_CALLBACK_DEC_HH


#ifdef __cplusplus
extern "C"
{
#endif
    extern HANDLE Elastos_ContentViewRenderView_nativeInit(IInterface* caller,HANDLE rootWindowNativePointer);
    extern void Elastos_ContentViewRenderView_nativeDestroy(IInterface* caller,HANDLE nativeContentViewRenderView);
    extern void Elastos_ContentViewRenderView_nativeSetCurrentContentViewCore(IInterface* caller,HANDLE nativeContentViewRenderView,HANDLE nativeContentViewCore);
    extern void Elastos_ContentViewRenderView_nativeSetLayerTreeBuildHelper(IInterface* caller,HANDLE nativeContentViewRenderView,HANDLE buildHelperNativePtr);
    extern void Elastos_ContentViewRenderView_nativeSurfaceCreated(IInterface* caller,HANDLE nativeContentViewRenderView);
    extern void Elastos_ContentViewRenderView_nativeSurfaceDestroyed(IInterface* caller,HANDLE nativeContentViewRenderView);
    extern void Elastos_ContentViewRenderView_nativeSurfaceChanged(IInterface* caller,HANDLE nativeContentViewRenderView,Int32 format,Int32 width,Int32 height,IInterface* surface);
    extern void Elastos_ContentViewRenderView_nativeSetOverlayVideoMode(IInterface* caller,HANDLE nativeContentViewRenderView,Boolean enabled);
    extern void Elastos_ContentViewRenderView_InitCallback(HANDLE cb);
#ifdef __cplusplus
}
#endif


namespace Elastos {
namespace Droid {
namespace Webkit {
namespace Webview {
namespace Chromium {
namespace Content {
namespace Browser {

struct ElaContentViewRenderViewCallback
{
    void (*elastos_ContentViewRenderView_onCompositorLayout)(IInterface* obj);
    void (*elastos_ContentViewRenderView_onSwapBuffersCompleted)(IInterface* obj);
};

void* ContentViewRenderView::ElaContentViewRenderViewCallback_Init()
{
    static ElaContentViewRenderViewCallback sElaContentViewRenderViewCallback;

    sElaContentViewRenderViewCallback.elastos_ContentViewRenderView_onCompositorLayout = &ContentViewRenderView::OnCompositorLayout;
    sElaContentViewRenderViewCallback.elastos_ContentViewRenderView_onSwapBuffersCompleted = &ContentViewRenderView::OnSwapBuffersCompleted;

    Elastos_ContentViewRenderView_InitCallback((HANDLE)&sElaContentViewRenderViewCallback);
    return &sElaContentViewRenderViewCallback;
}

static void* sPElaContentViewRenderViewCallback = ContentViewRenderView::ElaContentViewRenderViewCallback_Init();

} // namespace Browser
} // namespace Content
} // namespace Chromium
} // namespace Webview
} // namespace Webkit
} // namespace Droid
} // namespace Elastos

#endif //ELASTOS_CONTENTVIEWRENDERVIEW_CALLBACK_DEC_HH
