//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

//This file is autogenerated for
//    VideoCapture.java
//put this file at the end of the include list
//so the type definition used in this file will be found
#ifndef ELASTOS_VIDEOCAPTURE_CALLBACK_DEC_HH
#define ELASTOS_VIDEOCAPTURE_CALLBACK_DEC_HH


#ifdef __cplusplus
extern "C"
{
#endif
    extern void Elastos_VideoCapture_nativeOnFrameAvailable(IInterface* caller,HANDLE nativeVideoCaptureDeviceAndroid,ArrayOf<Byte>* data,Int32 length,Int32 rotation);
    extern void Elastos_VideoCapture_InitCallback(HANDLE cb);
#ifdef __cplusplus
}
#endif


namespace Elastos {
namespace Droid {
namespace Webkit {
namespace Webview {
namespace Chromium {
namespace Media {

struct ElaVideoCaptureCallback
{
    Boolean (*elastos_VideoCapture_allocate)(IInterface* obj, Int32 width, Int32 height, Int32 frameRate);
    Int32 (*elastos_VideoCapture_startCapture)(IInterface* obj);
    Int32 (*elastos_VideoCapture_stopCapture)(IInterface* obj);
    void (*elastos_VideoCapture_deallocate)(IInterface* obj);
    Int32 (*elastos_VideoCapture_queryWidth)(IInterface* obj);
    Int32 (*elastos_VideoCapture_queryHeight)(IInterface* obj);
    Int32 (*elastos_VideoCapture_queryFrameRate)(IInterface* obj);
    Int32 (*elastos_VideoCapture_getColorspace)(IInterface* obj);
};

void* VideoCapture::ElaVideoCaptureCallback_Init()
{
    static ElaVideoCaptureCallback sElaVideoCaptureCallback;

    sElaVideoCaptureCallback.elastos_VideoCapture_allocate = &VideoCapture::Allocate;
    sElaVideoCaptureCallback.elastos_VideoCapture_startCapture = &VideoCapture::StartCapture;
    sElaVideoCaptureCallback.elastos_VideoCapture_stopCapture = &VideoCapture::StopCapture;
    sElaVideoCaptureCallback.elastos_VideoCapture_deallocate = &VideoCapture::Deallocate;
    sElaVideoCaptureCallback.elastos_VideoCapture_queryWidth = &VideoCapture::QueryWidth;
    sElaVideoCaptureCallback.elastos_VideoCapture_queryHeight = &VideoCapture::QueryHeight;
    sElaVideoCaptureCallback.elastos_VideoCapture_queryFrameRate = &VideoCapture::QueryFrameRate;
    sElaVideoCaptureCallback.elastos_VideoCapture_getColorspace = &VideoCapture::GetColorspace;

    Elastos_VideoCapture_InitCallback((HANDLE)&sElaVideoCaptureCallback);
    return &sElaVideoCaptureCallback;
}

static void* sPElaVideoCaptureCallback = VideoCapture::ElaVideoCaptureCallback_Init();

} // namespace Media
} // namespace Chromium
} // namespace Webview
} // namespace Webkit
} // namespace Droid
} // namespace Elastos

#endif //ELASTOS_VIDEOCAPTURE_CALLBACK_DEC_HH
