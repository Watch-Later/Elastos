//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

//This file is autogenerated for
//    AwContentsClientBridge.java
//put this file at the end of the include list
//so the type definition used in this file will be found
#ifndef ELASTOS_AWCONTENTSCLIENTBRIDGE_CALLBACK_DEC_HH
#define ELASTOS_AWCONTENTSCLIENTBRIDGE_CALLBACK_DEC_HH


#ifdef __cplusplus
extern "C"
{
#endif
    extern void Elastos_AwContentsClientBridge_nativeProceedSslError(IInterface* caller,HANDLE nativeAwContentsClientBridge,Boolean proceed,Int32 id);
    extern void Elastos_AwContentsClientBridge_nativeProvideClientCertificateResponse(IInterface* caller,HANDLE nativeAwContentsClientBridge,Int32 id,ArrayOf<AutoPtr<ArrayOf<Byte> > >* certChain,IInterface* androidKey);
    extern void Elastos_AwContentsClientBridge_nativeConfirmJsResult(IInterface* caller,HANDLE nativeAwContentsClientBridge,Int32 id,const String& prompt);
    extern void Elastos_AwContentsClientBridge_nativeCancelJsResult(IInterface* caller,HANDLE nativeAwContentsClientBridge,Int32 id);
    extern void Elastos_AwContentsClientBridge_InitCallback(HANDLE cb);
#ifdef __cplusplus
}
#endif


namespace Elastos {
namespace Droid {
namespace Webkit {
namespace Webview {
namespace Chromium {
namespace AndroidWebview {

struct ElaAwContentsClientBridgeCallback
{
    void (*elastos_AwContentsClientBridge_setNativeContentsClientBridge)(IInterface* obj, Int64 nativeContentsClientBridge);
    Boolean (*elastos_AwContentsClientBridge_allowCertificateError)(IInterface* obj, Int32 certError, ArrayOf<Byte>* derBytes, const String& url, Int32 id);
    void (*elastos_AwContentsClientBridge_selectClientCertificate)(IInterface* obj, Int32 id, ArrayOf<String>* keyTypes, ArrayOf<AutoPtr<ArrayOf<Byte> > >* encodedPrincipals, const String& host, Int32 port);
    void (*elastos_AwContentsClientBridge_handleJsAlert)(IInterface* obj, const String& url, const String& message, Int32 id);
    void (*elastos_AwContentsClientBridge_handleJsConfirm)(IInterface* obj, const String& url, const String& message, Int32 id);
    void (*elastos_AwContentsClientBridge_handleJsPrompt)(IInterface* obj, const String& url, const String& message, const String& defaultValue, Int32 id);
    void (*elastos_AwContentsClientBridge_handleJsBeforeUnload)(IInterface* obj, const String& url, const String& message, Int32 id);
    Boolean (*elastos_AwContentsClientBridge_shouldOverrideUrlLoading)(IInterface* obj, const String& url);
};

void* AwContentsClientBridge::ElaAwContentsClientBridgeCallback_Init()
{
    static ElaAwContentsClientBridgeCallback sElaAwContentsClientBridgeCallback;

    sElaAwContentsClientBridgeCallback.elastos_AwContentsClientBridge_setNativeContentsClientBridge = &AwContentsClientBridge::SetNativeContentsClientBridge;
    sElaAwContentsClientBridgeCallback.elastos_AwContentsClientBridge_allowCertificateError = &AwContentsClientBridge::AllowCertificateError;
    sElaAwContentsClientBridgeCallback.elastos_AwContentsClientBridge_selectClientCertificate = &AwContentsClientBridge::SelectClientCertificate;
    sElaAwContentsClientBridgeCallback.elastos_AwContentsClientBridge_handleJsAlert = &AwContentsClientBridge::HandleJsAlert;
    sElaAwContentsClientBridgeCallback.elastos_AwContentsClientBridge_handleJsConfirm = &AwContentsClientBridge::HandleJsConfirm;
    sElaAwContentsClientBridgeCallback.elastos_AwContentsClientBridge_handleJsPrompt = &AwContentsClientBridge::HandleJsPrompt;
    sElaAwContentsClientBridgeCallback.elastos_AwContentsClientBridge_handleJsBeforeUnload = &AwContentsClientBridge::HandleJsBeforeUnload;
    sElaAwContentsClientBridgeCallback.elastos_AwContentsClientBridge_shouldOverrideUrlLoading = &AwContentsClientBridge::ShouldOverrideUrlLoading;

    Elastos_AwContentsClientBridge_InitCallback((HANDLE)&sElaAwContentsClientBridgeCallback);
    return &sElaAwContentsClientBridgeCallback;
}

static void* sPElaAwContentsClientBridgeCallback = AwContentsClientBridge::ElaAwContentsClientBridgeCallback_Init();

} // namespace AndroidWebview
} // namespace Chromium
} // namespace Webview
} // namespace Webkit
} // namespace Droid
} // namespace Elastos

#endif //ELASTOS_AWCONTENTSCLIENTBRIDGE_CALLBACK_DEC_HH
