//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

//This file is autogenerated for
//    AwCookieManager.java
//put this file at the end of the include list
//so the type definition used in this file will be found
#ifndef ELASTOS_AWCOOKIEMANAGER_CALLBACK_DEC_HH
#define ELASTOS_AWCOOKIEMANAGER_CALLBACK_DEC_HH


#ifdef __cplusplus
extern "C"
{
#endif
    extern void Elastos_AwCookieManager_nativeSetShouldAcceptCookies(IInterface* caller,Boolean accept);
    extern Boolean Elastos_AwCookieManager_nativeGetShouldAcceptCookies(IInterface* caller);
    extern void Elastos_AwCookieManager_nativeSetCookie(IInterface* caller,const String& url,const String& value,IInterface* callback);
    extern void Elastos_AwCookieManager_nativeSetCookieSync(IInterface* caller,const String& url,const String& value);
    extern String Elastos_AwCookieManager_nativeGetCookie(IInterface* caller,const String& url);
    extern void Elastos_AwCookieManager_nativeRemoveSessionCookies(IInterface* caller,IInterface* callback);
    extern void Elastos_AwCookieManager_nativeRemoveSessionCookiesSync(IInterface* caller);
    extern void Elastos_AwCookieManager_nativeRemoveAllCookies(IInterface* caller,IInterface* callback);
    extern void Elastos_AwCookieManager_nativeRemoveAllCookiesSync(IInterface* caller);
    extern void Elastos_AwCookieManager_nativeRemoveExpiredCookies(IInterface* caller);
    extern void Elastos_AwCookieManager_nativeFlushCookieStore(IInterface* caller);
    extern Boolean Elastos_AwCookieManager_nativeHasCookies(IInterface* caller);
    extern Boolean Elastos_AwCookieManager_nativeAllowFileSchemeCookies(IInterface* caller);
    extern void Elastos_AwCookieManager_nativeSetAcceptFileSchemeCookies(IInterface* caller,Boolean accept);
    extern void Elastos_AwCookieManager_InitCallback(HANDLE cb);
#ifdef __cplusplus
}
#endif


namespace Elastos {
namespace Droid {
namespace Webkit {
namespace Webview {
namespace Chromium {
namespace AndroidWebview {

struct ElaAwCookieManagerCallback
{
    void (*elastos_AwCookieManager_invokeBooleanCookieCallback)(IInterface* callback, Boolean result);
};

void* AwCookieManager::ElaAwCookieManagerCallback_Init()
{
    static ElaAwCookieManagerCallback sElaAwCookieManagerCallback;

    sElaAwCookieManagerCallback.elastos_AwCookieManager_invokeBooleanCookieCallback = &AwCookieManager::InvokeBooleanCookieCallback;

    Elastos_AwCookieManager_InitCallback((HANDLE)&sElaAwCookieManagerCallback);
    return &sElaAwCookieManagerCallback;
}

static void* sPElaAwCookieManagerCallback = AwCookieManager::ElaAwCookieManagerCallback_Init();

} // namespace AndroidWebview
} // namespace Chromium
} // namespace Webview
} // namespace Webkit
} // namespace Droid
} // namespace Elastos

#endif //ELASTOS_AWCOOKIEMANAGER_CALLBACK_DEC_HH
