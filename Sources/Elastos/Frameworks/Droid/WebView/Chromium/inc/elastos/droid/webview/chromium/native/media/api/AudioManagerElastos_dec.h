//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

//This file is autogenerated for
//    AudioManagerAndroid.java
//put this file at the end of the include list
//so the type definition used in this file will be found
#ifndef ELASTOS_AUDIOMANAGERANDROID_CALLBACK_DEC_HH
#define ELASTOS_AUDIOMANAGERANDROID_CALLBACK_DEC_HH


#ifdef __cplusplus
extern "C"
{
#endif
    extern void Elastos_AudioManagerAndroid_nativeSetMute(IInterface* caller,HANDLE nativeAudioManagerAndroid,Boolean muted);
    extern void Elastos_AudioManagerAndroid_InitCallback(HANDLE cb);
#ifdef __cplusplus
}
#endif


namespace Elastos {
namespace Droid {
namespace Webkit {
namespace Webview {
namespace Chromium {
namespace Media {

struct ElaAudioManagerAndroidCallback
{
    Elastos::String (*elastos_AudioDeviceName_id)(IInterface* obj);
    Elastos::String (*elastos_AudioDeviceName_name)(IInterface* obj);
    AutoPtr<IInterface> (*elastos_AudioManagerAndroid_createAudioManagerAndroid)(IInterface* context, HANDLE nativeAudioManagerAndroid);
    void (*elastos_AudioManagerAndroid_init)(IInterface* obj);
    void (*elastos_AudioManagerAndroid_close)(IInterface* obj);
    void (*elastos_AudioManagerAndroid_setCommunicationAudioModeOn)(IInterface* obj, Boolean on);
    Boolean (*elastos_AudioManagerAndroid_setDevice)(IInterface* obj, const Elastos::String& deviceId);
    AutoPtr<ArrayOf<IInterface*> > (*elastos_AudioManagerAndroid_getAudioInputDeviceNames)(IInterface* obj);
    Int32 (*elastos_AudioManagerAndroid_getNativeOutputSampleRate)(IInterface* obj);
    Int32 (*elastos_AudioManagerAndroid_getMinInputFrameSize)(Int32 sampleRate, Int32 channels);
    Int32 (*elastos_AudioManagerAndroid_getMinOutputFrameSize)(Int32 sampleRate, Int32 channels);
    Boolean (*elastos_AudioManagerAndroid_isAudioLowLatencySupported)(IInterface* obj);
    Int32 (*elastos_AudioManagerAndroid_getAudioLowLatencyOutputFrameSize)(IInterface* obj);
    Boolean (*elastos_AudioManagerAndroid_shouldUseAcousticEchoCanceler)();
};

void* AudioManagerElastos::ElaAudioManagerElastosCallback_Init()
{
    static ElaAudioManagerAndroidCallback sElaAudioManagerAndroidCallback;
    sElaAudioManagerAndroidCallback.elastos_AudioDeviceName_id = &AudioManagerElastos::AudioDeviceName::Id;
    sElaAudioManagerAndroidCallback.elastos_AudioDeviceName_name = &AudioManagerElastos::AudioDeviceName::Name;
    sElaAudioManagerAndroidCallback.elastos_AudioManagerAndroid_createAudioManagerAndroid = &AudioManagerElastos::CreateAudioManagerElastos;
    sElaAudioManagerAndroidCallback.elastos_AudioManagerAndroid_init = &AudioManagerElastos::Init;
    sElaAudioManagerAndroidCallback.elastos_AudioManagerAndroid_close = &AudioManagerElastos::Close;
    sElaAudioManagerAndroidCallback.elastos_AudioManagerAndroid_setCommunicationAudioModeOn = &AudioManagerElastos::SetCommunicationAudioModeOn;
    sElaAudioManagerAndroidCallback.elastos_AudioManagerAndroid_setDevice = &AudioManagerElastos::SetDevice;
    sElaAudioManagerAndroidCallback.elastos_AudioManagerAndroid_getAudioInputDeviceNames = &AudioManagerElastos::GetAudioInputDeviceNames;
    sElaAudioManagerAndroidCallback.elastos_AudioManagerAndroid_getNativeOutputSampleRate = &AudioManagerElastos::GetNativeOutputSampleRate;
    sElaAudioManagerAndroidCallback.elastos_AudioManagerAndroid_getMinInputFrameSize = &AudioManagerElastos::GetMinInputFrameSize;
    sElaAudioManagerAndroidCallback.elastos_AudioManagerAndroid_getMinOutputFrameSize = &AudioManagerElastos::GetMinOutputFrameSize;
    sElaAudioManagerAndroidCallback.elastos_AudioManagerAndroid_isAudioLowLatencySupported = &AudioManagerElastos::IsAudioLowLatencySupported;
    sElaAudioManagerAndroidCallback.elastos_AudioManagerAndroid_getAudioLowLatencyOutputFrameSize = &AudioManagerElastos::GetAudioLowLatencyOutputFrameSize;
    sElaAudioManagerAndroidCallback.elastos_AudioManagerAndroid_shouldUseAcousticEchoCanceler = &AudioManagerElastos::ShouldUseAcousticEchoCanceler;

    Elastos_AudioManagerAndroid_InitCallback((HANDLE)&sElaAudioManagerAndroidCallback);
    return &sElaAudioManagerAndroidCallback;
}

static void* sPElaAudioManagerAndroidCallback = AudioManagerElastos::ElaAudioManagerElastosCallback_Init();

} // namespace Media
} // namespace Chromium
} // namespace Webview
} // namespace Webkit
} // namespace Droid
} // namespace Elastos

#endif //ELASTOS_AUDIOMANAGERANDROID_CALLBACK_DEC_HH
