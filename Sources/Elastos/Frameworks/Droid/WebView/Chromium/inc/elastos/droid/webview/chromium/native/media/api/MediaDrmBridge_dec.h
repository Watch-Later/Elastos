//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

//This file is autogenerated for
//    MediaDrmBridge.java
//put this file at the end of the include list
//so the type definition used in this file will be found
#ifndef ELASTOS_MEDIADRMBRIDGE_CALLBACK_DEC_HH
#define ELASTOS_MEDIADRMBRIDGE_CALLBACK_DEC_HH


#ifdef __cplusplus
extern "C"
{
#endif
    extern void Elastos_MediaDrmBridge_nativeAddKeySystemUuidMapping(const String& keySystem,IInterface* uuid);
    extern void Elastos_MediaDrmBridge_nativeOnMediaCryptoReady(IInterface* caller,HANDLE nativeMediaDrmBridge);
    extern void Elastos_MediaDrmBridge_nativeOnSessionCreated(IInterface* caller,HANDLE nativeMediaDrmBridge,Int32 sessionId,const String& webSessionId);
    extern void Elastos_MediaDrmBridge_nativeOnSessionMessage(IInterface* caller,HANDLE nativeMediaDrmBridge,Int32 sessionId,ArrayOf<Byte>* message,const String& destinationUrl);
    extern void Elastos_MediaDrmBridge_nativeOnSessionReady(IInterface* caller,HANDLE nativeMediaDrmBridge,Int32 sessionId);
    extern void Elastos_MediaDrmBridge_nativeOnSessionClosed(IInterface* caller,HANDLE nativeMediaDrmBridge,Int32 sessionId);
    extern void Elastos_MediaDrmBridge_nativeOnSessionError(IInterface* caller,HANDLE nativeMediaDrmBridge,Int32 sessionId);
    extern void Elastos_MediaDrmBridge_nativeOnResetDeviceCredentialsCompleted(IInterface* caller,HANDLE nativeMediaDrmBridge,Boolean success);
    extern void Elastos_MediaDrmBridge_InitCallback(HANDLE cb);
#ifdef __cplusplus
}
#endif


namespace Elastos {
namespace Droid {
namespace Webkit {
namespace Webview {
namespace Chromium {
namespace Media {

struct ElaMediaDrmBridgeCallback
{
    Boolean (*elastos_MediaDrmBridge_isCryptoSchemeSupported)(ArrayOf<Byte>* schemeUUID, const String& containerMimeType);
    AutoPtr<IInterface> (*elastos_MediaDrmBridge_create)(ArrayOf<Byte>* schemeUUID, HANDLE nativeMediaDrmBridge);
    Boolean (*elastos_MediaDrmBridge_setSecurityLevel)(IInterface* obj, const String& securityLevel);
    AutoPtr<IInterface> (*elastos_MediaDrmBridge_getMediaCrypto)(IInterface* obj);
    void (*elastos_MediaDrmBridge_resetDeviceCredentials)(IInterface* obj);
    void (*elastos_MediaDrmBridge_release)(IInterface* obj);
    void (*elastos_MediaDrmBridge_createSession)(IInterface* obj, Int32 sessionId, ArrayOf<Byte>* initData, const String& mime);
    void (*elastos_MediaDrmBridge_releaseSession)(IInterface* obj, Int32 sessionId);
    void (*elastos_MediaDrmBridge_updateSession)(IInterface* obj, Int32 sessionId, ArrayOf<Byte>* key);
    String (*elastos_MediaDrmBridge_getSecurityLevel)(IInterface* obj);
};

void* MediaDrmBridge::ElaMediaDrmBridgeCallback_Init()
{
    static ElaMediaDrmBridgeCallback sElaMediaDrmBridgeCallback;

    sElaMediaDrmBridgeCallback.elastos_MediaDrmBridge_isCryptoSchemeSupported = &MediaDrmBridge::IsCryptoSchemeSupported;
    sElaMediaDrmBridgeCallback.elastos_MediaDrmBridge_create = &MediaDrmBridge::Create;
    sElaMediaDrmBridgeCallback.elastos_MediaDrmBridge_setSecurityLevel = &MediaDrmBridge::SetSecurityLevel;
    sElaMediaDrmBridgeCallback.elastos_MediaDrmBridge_getMediaCrypto = &MediaDrmBridge::GetMediaCrypto;
    sElaMediaDrmBridgeCallback.elastos_MediaDrmBridge_resetDeviceCredentials = &MediaDrmBridge::ResetDeviceCredentials;
    sElaMediaDrmBridgeCallback.elastos_MediaDrmBridge_release = &MediaDrmBridge::ReleaseResources;
    sElaMediaDrmBridgeCallback.elastos_MediaDrmBridge_createSession = &MediaDrmBridge::CreateSession;
    sElaMediaDrmBridgeCallback.elastos_MediaDrmBridge_releaseSession = &MediaDrmBridge::ReleaseSession;
    sElaMediaDrmBridgeCallback.elastos_MediaDrmBridge_updateSession = &MediaDrmBridge::UpdateSession;
    sElaMediaDrmBridgeCallback.elastos_MediaDrmBridge_getSecurityLevel = &MediaDrmBridge::GetSecurityLevel;

    Elastos_MediaDrmBridge_InitCallback((HANDLE)&sElaMediaDrmBridgeCallback);
    return &sElaMediaDrmBridgeCallback;
}

static void* sPElaMediaDrmBridgeCallback = MediaDrmBridge::ElaMediaDrmBridgeCallback_Init();

} // namespace Media
} // namespace Chromium
} // namespace Webview
} // namespace Webkit
} // namespace Droid
} // namespace Elastos

#endif //ELASTOS_MEDIADRMBRIDGE_CALLBACK_DEC_HH
