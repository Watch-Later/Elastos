//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    importlib("Elastos.CoreLibrary.eco");
    importlib("Elastos.Droid.Core.eco");

    using interface Elastos.Droid.Accounts.IAccountManagerResponse;
    using interface Elastos.Droid.App.IActivityContainerCallback;
    using interface Elastos.Droid.App.IIActivityController;
    using interface Elastos.Droid.App.IApplicationThread;
    using interface Elastos.Droid.App.ILocalActivityRecord;
    using interface Elastos.Droid.App.IPendingIntent;
    using interface Elastos.Droid.App.IIProcessObserver;
    using interface Elastos.Droid.App.IStopUserCallback;
    using interface Elastos.Droid.App.IIBackupAgent;
    using interface Elastos.Droid.App.IIServiceConnection;
    using interface Elastos.Droid.App.IInstrumentationWatcher;
    using interface Elastos.Droid.App.IITransientNotification;
    using interface Elastos.Droid.App.IIUiAutomationConnection;
    using interface Elastos.Droid.App.IIUserSwitchObserver;
    using interface Elastos.Droid.App.IIWallpaperManagerCallback;
    using interface Elastos.Droid.App.Backup.IIFullBackupRestoreObserver;
    using interface Elastos.Droid.App.Backup.IIRestoreObserver;
    using interface Elastos.Droid.Internal.App.IIMediaContainerService;
    using interface Elastos.Droid.Internal.AppWidget.IIAppWidgetHost;
    using interface Elastos.Droid.Content.IOnPrimaryClipChangedListener;
    using interface Elastos.Droid.Content.IContentResolver;
    using interface Elastos.Droid.Content.IIContentProvider;
    using interface Elastos.Droid.Content.IIntentFilter;
    using interface Elastos.Droid.Content.IIntentReceiver;
    using interface Elastos.Droid.Content.IIIntentSender;
    using interface Elastos.Droid.Content.IISyncStatusObserver;
    using interface Elastos.Droid.Content.Pm.IIPackageDataObserver;
    using interface Elastos.Droid.Content.Pm.IIPackageDeleteObserver;
    using interface Elastos.Droid.Content.Pm.IIPackageDeleteObserver2;
    using interface Elastos.Droid.Content.Pm.IIPackageInstallObserver;
    using interface Elastos.Droid.Content.Pm.IIPackageInstallObserver2;
    using interface Elastos.Droid.Content.Pm.IIPackageMoveObserver;
    using interface Elastos.Droid.Content.Pm.IIPackageStatsObserver;
    using interface Elastos.Droid.Content.Pm.IElSignatureParser;
    using interface Elastos.Droid.Database.ICursor;
    using interface Elastos.Droid.Database.IContentObserver;
    using interface Elastos.Droid.Database.IDataSetObserver;
    using interface Elastos.Droid.Database.IIContentObserver;
    using interface Elastos.Droid.Hardware.Display.IIDisplayManagerCallback;
    using interface Elastos.Droid.Hardware.Input.IInputDevicesChangedListener;
    using interface Elastos.Droid.Internal.App.IIVoiceInteractor;
    using interface Elastos.Droid.Internal.Location.IILocationProvider;
    using interface Elastos.Droid.Internal.Os.IIParcelFileDescriptorFactory;
    using interface Elastos.Droid.Internal.TextService.IISpellCheckerSessionListener;
    using interface Elastos.Droid.Internal.TextService.IITextServicesSessionListener;
    using interface Elastos.Droid.Internal.View.IInputMethodClient;
    using interface Elastos.Droid.Internal.View.IIInputContext;
    using interface Elastos.Droid.Internal.View.IIInputContextCallback;
    using interface Elastos.Droid.Internal.View.IIInputMethod;
    using interface Elastos.Droid.Internal.View.IIInputMethodSession;
    using interface Elastos.Droid.Internal.Widget.IIRemoteViewsAdapterConnection;
    using interface Elastos.Droid.Internal.Widget.IIRemoteViewsFactory;
    using interface Elastos.Droid.Location.IICountryListener;
    using interface Elastos.Droid.Location.IIGpsMeasurementsListener;
    using interface Elastos.Droid.Location.IIGpsNavigationMessageListener;
    using interface Elastos.Droid.Location.IIGpsStatusListener;
    using interface Elastos.Droid.Location.IILocationListener;
    using interface Elastos.Droid.Media.IIAudioFocusDispatcher;
    using interface Elastos.Droid.Media.IIRemoteControlClient;
    using interface Elastos.Droid.Media.IIRemoteControlDisplay;
    using interface Elastos.Droid.Media.IIRemoteVolumeObserver;
    using interface Elastos.Droid.Media.IIRingtonePlayer;
    using interface Elastos.Droid.Media.IIAudioRoutesObserver;
    using interface Elastos.Droid.Media.IIVolumeController;
    using interface Elastos.Droid.Media.IIMediaRouterClient;
    using interface Elastos.Droid.Media.Session.IISessionCallback;
    using interface Elastos.Droid.Net.IINetworkPolicyListener;
    using interface Elastos.Droid.Os.IBinder;
    using interface Elastos.Droid.Os.IICancellationSignal;
    using interface Elastos.Droid.Os.IIMessenger;
    using interface Elastos.Droid.Os.IIRemoteCallback;
    using interface Elastos.Droid.Os.Storage.IIMountServiceListener;
    using interface Elastos.Droid.Os.Storage.IIMountShutdownObserver;
    using interface Elastos.Droid.Os.Storage.IIObbActionListener;
    using interface Elastos.Droid.Service.Dreams.IIDreamService;
    using interface Elastos.Droid.Service.Notification.IINotificationListener;
    using interface Elastos.Droid.Service.Notification.IIConditionProvider;
    using interface Elastos.Droid.Service.Notification.IIConditionListener;
    using interface Elastos.Droid.Service.Voice.IIVoiceInteractionSession;
    using interface Elastos.Droid.Service.Wallpaper.IIWallpaperService;
    using interface Elastos.Droid.Service.Wallpaper.IIWallpaperEngine;
    using interface Elastos.Droid.Service.Wallpaper.IIWallpaperConnection;
    using interface Elastos.Droid.View.IApplicationToken;
    using interface Elastos.Droid.View.IIWindow;
    using interface Elastos.Droid.View.IIInputFilter;
    using interface Elastos.Droid.View.IInputMethodCallback;
    using interface Elastos.Droid.View.IOnKeyguardExitResult;
    using interface Elastos.Droid.View.IRotationWatcher;
    using interface Elastos.Droid.View.IIWindowSessionCallback;
    using interface Elastos.Droid.View.InputMethod.IInputMethodSession;
    using interface Elastos.IO.ICloseable;
    using interface Elastos.IO.ISerializable;

    namespace Elastos {
    namespace Droid {
    namespace JavaProxy {

    interface IJavaNativeProxy {
        GetJavaInstance(
            [out] HANDLE* obj);
    }

    /**
     * @Involve
     * interface Elastos.Droid.View.InputMethod.IInputMethodSession
     */
    interface IInputMethodSessionNative {
        SetEnabled(
            [in] Boolean enabled);
    }

    class CApplicationThreadNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IApplicationThread;
        interface IBinder;
    }

    class CBinderNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IBinder;
    }

    class CDisplayManagerCallbackNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIDisplayManagerCallback;
        interface IBinder;
    }

    class CInputMethodClientNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IInputMethodClient;
        interface IBinder;
    }

    class CInputContextNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIInputContext;
        interface IBinder;
    }

    class CWindowNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIWindow;
        interface IBinder;
    }

    class CInputDevicesChangedListenerNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IInputDevicesChangedListener;
        interface IBinder;
    }

    class CIntentReceiverNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIntentReceiver;
        interface IBinder;
    }

    class CPackageStatusObserverNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIPackageStatsObserver;
        interface IBinder;
    }

    class CCursorNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface ICursor;
        interface ICloseable;
        interface IBinder;
    }

    class CContentProviderNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIContentProvider;
        interface IBinder;
    }

    class CInputMethodCallbackNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IInputMethodCallback;
        interface IBinder;
    }

    class CIContentObserverNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIContentObserver;
        interface IBinder;
    }

    class CLocalActivityRecordNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface ILocalActivityRecord;
        interface IBinder;
    }

    class CMessengerNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIMessenger;
        interface IBinder;
    }

    class CIIntentSenderNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIIntentSender;
        interface IBinder;
    }

    class CGpsStatusListener {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIGpsStatusListener;
        interface IBinder;
    }

    class CLocationListener {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IILocationListener;
        interface IBinder;
    }

    class CMountServiceListener {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIMountServiceListener;
        interface IBinder;
    }

    class CIServiceConnectionNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIServiceConnection;
        interface IBinder;
    }

    class CServiceNative {
        constructor();

        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IBinder;
        interface IParcelable;
    }

    class CAccountManagerResponseNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IAccountManagerResponse;
        interface IBinder;
    }

    class CAppWidgetHostCallbacksNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIAppWidgetHost;
        interface IBinder;
    }

    class CInputMethodServiceNative {
        constructor(
           [in] HANDLE jVM,
           [in] HANDLE jInstance);

        interface IIInputMethod;
        interface IBinder;
    }

    class CIInputMethodSessionNative {
        constructor(
           [in] HANDLE jVM,
           [in] HANDLE jInstance);

        interface IIInputMethodSession;
        interface IBinder;
    }

    class CInputMethodSessionNative {
        constructor(
           [in] HANDLE jVM,
           [in] HANDLE jInstance);

        interface IInputMethodSession;
        interface IInputMethodSessionNative;
        interface IBinder;
    }

    class CIInputContextCallbackNative {
        constructor(
           [in] HANDLE jVM,
           [in] HANDLE jInstance);

        interface IIInputContextCallback;
        interface IBinder;
    }

    class CRemoteViewsAdapterConnectionNative{
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIRemoteViewsAdapterConnection;
        interface IBinder;
    }

    class CPackageInstallObserverNative {
        constructor(
           [in] HANDLE jVM,
           [in] HANDLE jInstance);

        interface IIPackageInstallObserver;
        interface IBinder;
    }

    class CPackageInstallObserver2Native {
        constructor(
           [in] HANDLE jVM,
           [in] HANDLE jInstance);

        interface IIPackageInstallObserver2;
        interface IBinder;
    }

    class CMediaContainerServiceNative {
        constructor(
           [in] HANDLE jVM,
           [in] HANDLE jInstance);

        interface IIMediaContainerService;
        interface IBinder;
    }

    class CContentObserverNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IContentObserver;
        interface IBinder;
    }

    class CIOnPrimaryClipChangedListenerNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IOnPrimaryClipChangedListener;
        interface IBinder;
    }

    class CITransientNotificationNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IITransientNotification;
        interface IBinder;
    }

    class CIPackageDeleteObserverNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIPackageDeleteObserver;
        interface IBinder;
    }

    class CIPackageDeleteObserver2Native {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIPackageDeleteObserver2;
        interface IBinder;
    }

    class CIWallpaperManagerCallbackNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIWallpaperManagerCallback;
        interface IBinder;
    }

    class CIIWallpaperServiceNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIWallpaperService;
        interface IBinder;
    }

    class CIWallpaperEngineNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIWallpaperEngine;
        interface IBinder;
    }

    class CRemoteViewsFactoryNative{
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIRemoteViewsFactory;
        interface IBinder;
    }

    class CIILocationProviderNative{
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IILocationProvider;
        interface IBinder;
    }

    [deprecated]
    class CIParcelableNative{
        constructor();

        constructor(
            [in] String pkgPath,
            [in] ArrayOf<Byte>* obj);

        interface IParcelable;
        interface IBinder;
    }

    [deprecated]
    class CISerializableNative{
        constructor();

        constructor(
            [in] Boolean isDexClassLoader,
            [in] String pkgPath,
            [in] String optimizedDirectory,
            [in] ArrayOf<Byte>* obj);

        interface ISerializable;
        interface IParcelable;
        interface IBinder;
    }

    class CIPackageDataObserverNative{
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIPackageDataObserver;
        interface IBinder;
    }

    class CDataSetObserverNative{
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IDataSetObserver;
        interface IBinder;
    }

    class CContentResolverNative{
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IContentResolver;
        interface IBinder;
    }

    class CIInstrumentationWatcherNative{
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IInstrumentationWatcher;
        interface IBinder;
    }

    class CIWallpaperConnectionNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIWallpaperConnection;
        interface IBinder;
    }

    class CIActivityControllerNative{
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIActivityController;
        interface IBinder;
    }

    class CIStopUserCallbackNative{
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IStopUserCallback;
        interface IBinder;
    }

    class CIProcessObserverNative{
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIProcessObserver;
        interface IBinder;
    }

    class CIUserSwitchObserverNative{
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIUserSwitchObserver;
        interface IBinder;
    }

    class CIPackageMoveObserverNative{
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIPackageMoveObserver;
        interface IBinder;
    }

    class CIApplicationTokenNative{
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IApplicationToken;
        interface IBinder;
    }

    class CIOnKeyguardExitResultNative{
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IOnKeyguardExitResult;
        interface IBinder;
    }

    class CIRemoteCallbackNative{
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIRemoteCallback;
        interface IBinder;
    }

    class CIRotationWatcherNative{
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IRotationWatcher;
        interface IBinder;
    }

    class CIInputFilterNative{
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIInputFilter;
        interface IBinder;
    }

    class CISyncStatusObserver{
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IISyncStatusObserver;
        interface IBinder;
    }

    class CIMountShutdownObserverNative{
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIMountShutdownObserver;
        interface IBinder;
    }

    class CIObbActionListenerNative{
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIObbActionListener;
        interface IBinder;
    }

    class CIAudioFocusDispatcher {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIAudioFocusDispatcher;
        interface IBinder;
    }

    class CIRemoteControlClient {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIRemoteControlClient;
        interface IBinder;
    }

    class CIRemoteControlDisplay {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIRemoteControlDisplay;
        interface IJavaNativeProxy;
        interface IBinder;
    }

    class CIRemoteVolumeObserver {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIRemoteVolumeObserver;
        interface IBinder;
    }

    class CIRingtonePlayer {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIRingtonePlayer;
        interface IBinder;
    }

    class CIAudioRoutesObserver {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIAudioRoutesObserver;
        interface IBinder;
    }

    class CICancellationSignalNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IICancellationSignal;
        interface IBinder;
    }

    class CTextServicesSessionListenerNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IITextServicesSessionListener;
        interface IBinder;
    }

    class CSpellCheckerSessionListenerNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IISpellCheckerSessionListener;
        interface IBinder;
    }

    class CIBackupAgentNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIBackupAgent;
        interface IBinder;
    }

    class CIFullBackupRestoreObserverNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIFullBackupRestoreObserver;
        interface IBinder;
    }

    class CIRestoreObserverNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIRestoreObserver;
        interface IBinder;
    }

    class CICountryListenerNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IICountryListener;
        interface IBinder;
    }

    class CIGpsMeasurementsListenerNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIGpsMeasurementsListener;
        interface IBinder;
    }

    class CIGpsNavigationMessageListenerNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIGpsNavigationMessageListener;
        interface IBinder;
    }

    class CIVolumeControllerNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIVolumeController;
        interface IBinder;
    }

    class CIMediaRouterClientNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIMediaRouterClient;
        interface IBinder;
    }

    class CIVoiceInteractionSessionNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIVoiceInteractionSession;
        interface IBinder;
    }

    class CIVoiceInteractorNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIVoiceInteractor;
        interface IBinder;
    }

    class CIUiAutomationConnectionNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIUiAutomationConnection;
        interface IBinder;
    }

    class CIActivityContainerCallbackNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IActivityContainerCallback;
        interface IBinder;
    }

    class CINotificationListenerNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IINotificationListener;
        interface IBinder;
    }

    class CIConditionProviderNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIConditionProvider;
        interface IBinder;
    }

    class CIConditionListenerNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIConditionListener;
        interface IBinder;
    }

    class CIParcelFileDescriptorFactoryNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIParcelFileDescriptorFactory;
        interface IBinder;
    }

    class CIWindowSessionCallbackNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIWindowSessionCallback;
        interface IBinder;
    }

    class CINetworkPolicyListenerNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IINetworkPolicyListener;
        interface IBinder;
    }

    class CMediaSessionCallbackStubNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IISessionCallback;
        interface IBinder;
    }

    class CIDreamServiceNative {
        constructor(
            [in] HANDLE jVM,
            [in] HANDLE jInstance);

        interface IIDreamService;
        interface IBinder;
    }

    } // namespace JavaProxy
    } // namespace Droid
    } // namespace Elastos
}
